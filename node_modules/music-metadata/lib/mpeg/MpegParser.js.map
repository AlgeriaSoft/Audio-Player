{"version":3,"file":"MpegParser.js","sourceRoot":"","sources":["../../src/mpeg/MpegParser.ts"],"names":[],"mappings":"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AAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAC;QACvD,IAAI,EAAE,EAAC,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAC;QACvD,IAAI,EAAE,EAAC,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAC;QACzD,IAAI,EAAE,EAAC,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAC;QAC1D,IAAI,EAAE,EAAC,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAC;QAC1D,IAAI,EAAE,EAAC,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAC;QAC1D,IAAI,EAAE,EAAC,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAC;QAC5D,IAAI,EAAE,EAAC,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAC;QAC5D,IAAI,EAAE,EAAC,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAA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","sourcesContent":["'use strict';\n\nimport ReadableStream = NodeJS.ReadableStream;\n\nimport {ITokenizer, EndOfFile} from \"strtok3\";\nimport {IFormat} from \"../\";\nimport Common from \"../common\";\nimport * as Token from \"token-types\";\nimport {StringType, BufferType} from \"token-types\";\nimport {Promise} from \"es6-promise\";\n\n/**\n * MPEG Audio Layer I/II/III frame header\n * Ref: https://www.mp3-tech.org/programmer/frame_header.html\n * Bit layout: AAAAAAAA AAABBCCD EEEEFFGH IIJJKLMM\n */\nclass MpegFrameHeader {\n\n  public static SyncByte1 = 0xFF;\n  public static SyncByte2 = 0xE0;\n\n  public static VersionID = [2.5, null, 2, 1];\n  public static LayerDescription = [null, 3, 2, 1];\n  public static ChannelMode = ['stereo', 'joint_stereo', 'dual_channel', 'mono'];\n\n  private static bitrate_index = {\n    0x01: {11: 32, 12: 32, 13: 32, 21: 32, 22: 8, 23: 8},\n    0x02: {11: 64, 12: 48, 13: 40, 21: 48, 22: 16, 23: 16},\n    0x03: {11: 96, 12: 56, 13: 48, 21: 56, 22: 24, 23: 24},\n    0x04: {11: 128, 12: 64, 13: 56, 21: 64, 22: 32, 23: 32},\n    0x05: {11: 160, 12: 80, 13: 64, 21: 80, 22: 40, 23: 40},\n    0x06: {11: 192, 12: 96, 13: 80, 21: 96, 22: 48, 23: 48},\n    0x07: {11: 224, 12: 112, 13: 96, 21: 112, 22: 56, 23: 56},\n    0x08: {11: 256, 12: 128, 13: 112, 21: 128, 22: 64, 23: 64},\n    0x09: {11: 288, 12: 160, 13: 128, 21: 144, 22: 80, 23: 80},\n    0x0A: {11: 320, 12: 192, 13: 160, 21: 160, 22: 96, 23: 96},\n    0x0B: {11: 352, 12: 224, 13: 192, 21: 176, 22: 112, 23: 112},\n    0x0C: {11: 384, 12: 256, 13: 224, 21: 192, 22: 128, 23: 128},\n    0x0D: {11: 416, 12: 320, 13: 256, 21: 224, 22: 144, 23: 144},\n    0x0E: {11: 448, 12: 384, 13: 320, 21: 256, 22: 160, 23: 160}\n  };\n\n  private static sampling_rate_freq_index = {\n    1: {0x00: 44100, 0x01: 48000, 0x02: 32000},\n    2: {0x00: 22050, 0x01: 24000, 0x02: 16000},\n    2.5: {0x00: 11025, 0x01: 12000, 0x02: 8000}\n  };\n\n  private static samplesInFrameTable = [\n    /* Layer   I    II   III */\n    [0, 384, 1152, 1152], // MPEG-1\n    [0, 384, 1152, 576] // MPEG-2(.5\n  ];\n\n  // B(20,19): MPEG Audio versionIndex ID\n  public versionIndex: number;\n  // C(18,17): Layer description\n  public layerIndex: number;\n  // D(16): Protection bit\n  public isProtectedByCRC: boolean;\n  // E(15,12): Bitrate index\n  public bitrateIndex: number;\n  // F(11,10): Sampling rate frequency index\n  public sampRateFreqIndex: number;\n  // G(9): Padding bit\n  public padding: boolean;\n  // H(8): Private bit\n  public privateBit: boolean;\n  // I(7,6): Channel Mode\n  public channelModeIndex: number;\n  // J(5,4): Mode extension (Only used in Joint stereo)\n  public modeExtension: number;\n  // K(3): Copyright\n  public isCopyrighted: boolean;\n  // L(2): Original\n  public isOriginalMedia: boolean;\n  // M(3): The original bit indicates, if it is set, that the frame is located on its original media.\n  public emphasis: number;\n\n  public layer: number;\n  public version: number;\n  public channelMode: string;\n  public bitrate: number;\n  public samplingRate: number;\n\n  public constructor(buf, off) {\n    // B(20,19): MPEG Audio versionIndex ID\n    this.versionIndex = Common.getBitAllignedNumber(buf, off + 1, 3, 2);\n    // C(18,17): Layer description\n    this.layer = MpegFrameHeader.LayerDescription[Common.getBitAllignedNumber(buf, off + 1, 5, 2)];\n\n    if (this.layer === null)\n      throw new Error('Invalid MPEG layer');\n\n    // D(16): Protection bit (if true 16-bit CRC follows header)\n    this.isProtectedByCRC = !Common.isBitSet(buf, off + 1, 7);\n    // E(15,12): Bitrate index\n    this.bitrateIndex = Common.getBitAllignedNumber(buf, off + 2, 0, 4);\n    // F(11,10): Sampling rate frequency index\n    this.sampRateFreqIndex = Common.getBitAllignedNumber(buf, off + 2, 4, 2);\n    // G(9): Padding bit\n    this.padding = Common.isBitSet(buf, off + 2, 6);\n    // H(8): Private bit\n    this.privateBit = Common.isBitSet(buf, off + 2, 7);\n    // I(7,6): Channel Mode\n    this.channelModeIndex = Common.getBitAllignedNumber(buf, off + 3, 0, 2);\n    // J(5,4): Mode extension (Only used in Joint stereo)\n    this.modeExtension = Common.getBitAllignedNumber(buf, off + 3, 2, 2);\n    // K(3): Copyright\n    this.isCopyrighted = Common.isBitSet(buf, off + 3, 4);\n    // L(2): Original\n    this.isOriginalMedia = Common.isBitSet(buf, off + 3, 5);\n    // M(3): The original bit indicates, if it is set, that the frame is located on its original media.\n    this.emphasis = Common.getBitAllignedNumber(buf, off + 3, 7, 2);\n\n    this.version = MpegFrameHeader.VersionID[this.versionIndex];\n\n    if (this.version === null)\n      throw new Error('Invalid MPEG Audio version');\n\n    this.channelMode = MpegFrameHeader.ChannelMode[this.channelModeIndex];\n\n    // Calculate bitrate\n    const bitrateInKbps = this.calcBitrate();\n    if (!bitrateInKbps) {\n      throw new Error('Cannot determine bit-rate');\n    }\n    this.bitrate = bitrateInKbps === null ? null : bitrateInKbps * 1000;\n\n    // Calculate sampling rate\n    this.samplingRate = this.calcSamplingRate();\n    if (this.samplingRate == null) {\n      throw new Error('Cannot determine sampling-rate');\n    }\n  }\n\n  public calcDuration(numFrames): number {\n    return Math.round(numFrames * (this.calcSamplesPerFrame() / this.samplingRate));\n  }\n\n  public calcSamplesPerFrame(): number {\n    return MpegFrameHeader.samplesInFrameTable[this.version === 1 ? 0 : 1][this.layer];\n  }\n\n  public calculateSideInfoLength(): number {\n    if (this.layer !== 3) return 2;\n    if (this.channelModeIndex === 3) {\n      // mono\n      if (this.version === 1) {\n        return 17;\n      } else if (this.version === 2 || this.version === 2.5) {\n        return 9;\n      }\n    } else {\n      if (this.version === 1) {\n        return 32;\n      } else if (this.version === 2 || this.version === 2.5) {\n        return 17;\n      }\n    }\n  }\n\n  public calcSlotSize(): number {\n    return [null, 4, 1, 1][this.layer];\n  }\n\n  private calcBitrate(): number {\n    if (this.bitrateIndex === 0x00) return null; // free\n    if (this.bitrateIndex === 0x0F) return null; // 'reserved'\n    const mpegVersion: string = this.version.toString() + this.layer;\n    return MpegFrameHeader.bitrate_index[this.bitrateIndex][mpegVersion];\n  }\n\n  private calcSamplingRate(): number {\n    if (this.sampRateFreqIndex === 0x03) return null; // 'reserved'\n    return MpegFrameHeader.sampling_rate_freq_index[this.version][this.sampRateFreqIndex];\n  }\n}\n\ninterface IXingInfoTag {\n\n  headerFlags: Buffer,\n\n  /**\n   * total bit stream frames from Vbr header data\n   */\n  numFrames: number,\n\n  numToCentries: Buffer,\n\n  /**\n   * the number of header APE_HEADER bytes\n   */\n  streamSize: number,\n\n  /**\n   * the number of header data bytes (from original file)\n   */\n  vbrScale: number,\n\n  /**\n   * LAME Tag, extends the Xing header format\n   * First added in LAME 3.12 for VBR\n   * The modified header is also included in CBR files (effective LAME 3.94), with \"Info\" instead of \"XING\" near the beginning.\n   */\n\n  //  Initial LAME info, e.g.: LAME3.99r\n  encoder: string,\n  /**\n   * Info Tag\n   */\n  infoTag: number,\n  /**\n   * VBR method\n   */\n  vbrMethod: number;\n}\n\n/**\n * MPEG Audio Layer I/II/III\n */\nclass MpegAudioLayer {\n\n  public static FrameHeader = {\n    len: 4,\n\n    get: (buf, off): MpegFrameHeader => {\n      return new MpegFrameHeader(buf, off);\n    }\n  };\n\n  /**\n   * Info Tag: Xing, LAME\n   */\n  public static InfoTagHeaderTag = new StringType(4, 'ascii');\n\n  /**\n   * LAME TAG value\n   * Did not find any official documentation for this\n   * Value e.g.: \"3.98.4\"\n   */\n  public static LameEncoderVersion = new StringType(6, 'ascii');\n\n  /**\n   * Info Tag\n   * Ref: http://gabriel.mp3-tech.org/mp3infotag.html\n   */\n  public static XingInfoTag: Token.IGetToken<IXingInfoTag> = {\n    len: 136,\n\n    get: (buf, off) => {\n      return {\n        // 4 bytes for HeaderFlags\n        headerFlags: new BufferType(4).get(buf, off),\n\n        // 100 bytes for entry (NUMTOCENTRIES)\n        // numToCentries: new strtok.BufferType(100).get(buf, off + 8),\n        // FRAME SIZE\n        // frameSize: strtok.UINT32_BE.get(buf, off + 108),\n\n        numFrames: Token.UINT32_BE.get(buf, off + 4),\n\n        numToCentries: new BufferType(100).get(buf, off + 104),\n\n        // the number of header APE_HEADER bytes\n        streamSize: Token.UINT32_BE.get(buf, off + 108),\n        // the number of header data bytes (from original file)\n        vbrScale: Token.UINT32_BE.get(buf, off + 112),\n\n        /**\n         * LAME Tag, extends the Xing header format\n         * First added in LAME 3.12 for VBR\n         * The modified header is also included in CBR files (effective LAME 3.94), with \"Info\" instead of \"XING\" near the beginning.\n         */\n\n        //  Initial LAME info, e.g.: LAME3.99r\n        encoder: new StringType(9, 'ascii').get(buf, off + 116),\n        //  Info Tag\n        infoTag: Token.UINT8.get(buf, off + 125) >> 4,\n        // VBR method\n        vbrMethod: Token.UINT8.get(buf, off + 125) & 0xf\n      };\n    }\n  };\n\n  public static getVbrCodecProfile(vbrScale: number): string {\n    return 'V' + (100 - vbrScale) / 10;\n  }\n}\n\nexport class MpegParser {\n\n  private frameCount: number = 0;\n  private countSkipFrameData: number = 0;\n\n  private audioFrameHeader;\n  private bitrates: number[] = [];\n  private offset: number;\n  private frame_size;\n  private crc: number;\n  private unsynced: number = 0;\n  private warnings: string[] = [];\n\n  private calculateVbrDuration: boolean = false;\n  private samplesPerFrame;\n\n  private format: IFormat;\n\n  private buf_frame_header = new Buffer(4);\n\n  public constructor(private tokenizer: ITokenizer, private headerSize: number, private readDuration: boolean) {\n  }\n\n  public parse(): Promise<IFormat> {\n\n    this.format = {\n      dataformat: 'mp3',\n      lossless: false\n    };\n\n    return this.sync().then(() => {\n      return this.format;\n    }).catch((err) => {\n      if (err === EndOfFile) {\n        if (this.calculateVbrDuration) {\n          this.format.numberOfSamples = this.frameCount * this.samplesPerFrame;\n          this.format.duration = this.format.numberOfSamples / this.format.sampleRate;\n        }\n        return this.format;\n      } else {\n        throw err;\n      }\n    });\n  }\n\n  public sync(): Promise<void> {\n    return this.tokenizer.readBuffer(this.buf_frame_header, 0, 1).then(() => {\n      if (this.buf_frame_header[0] === MpegFrameHeader.SyncByte1) {\n        return this.tokenizer.readBuffer(this.buf_frame_header, 1, 1).then(() => {\n          if ((this.buf_frame_header[1] & 0xE0) === 0xE0) {\n            // Synchronized\n            this.warnings.push(\"synchronized, after \" + this.unsynced + \" bytes of unsynced data\");\n            this.unsynced = 0;\n            return this.parseAudioFrameHeader(this.buf_frame_header);\n          } else {\n            this.unsynced += 2;\n            return this.sync();\n          }\n        });\n      } else {\n        ++this.unsynced;\n        return this.sync();\n      }\n    });\n  }\n\n  public parseAudioFrameHeader(buf_frame_header: Buffer): Promise<void> {\n\n    return this.tokenizer.readBuffer(buf_frame_header, 2, 2).then(() => {\n\n      let header: MpegFrameHeader;\n      try {\n        header = MpegAudioLayer.FrameHeader.get(buf_frame_header, 0);\n      } catch (err) {\n        this.warnings.push(\"Parse error: \" + err.message);\n        return this.sync();\n      }\n\n      // mp3 files are only found in MPEG1/2 Layer 3\n      if (( header.version !== 1 && header.version !== 2) || header.layer !== 3) {\n        this.warnings.push(\"Parse error:  mp3 files are only found in MPEG1/2 Layer 3\");\n        return this.sync();\n      }\n\n      this.format.dataformat = 'mp3';\n      this.format.lossless = false;\n\n      this.format.bitrate = header.bitrate;\n      this.format.sampleRate = header.samplingRate;\n      this.format.numberOfChannels = header.channelMode === 'mono' ? 1 : 2;\n\n      const slot_size = header.calcSlotSize();\n      if (slot_size === null) {\n        throw new Error('invalid slot_size');\n      }\n\n      const samples_per_frame = header.calcSamplesPerFrame();\n      const bps = samples_per_frame / 8.0;\n      const fsize = (bps * header.bitrate / header.samplingRate) +\n        ((header.padding) ? slot_size : 0);\n      this.frame_size = Math.floor(fsize);\n\n      this.audioFrameHeader = header;\n      this.frameCount++;\n      this.bitrates.push(header.bitrate);\n\n      // xtra header only exists in first frame\n      if (this.frameCount === 1) {\n        this.offset = MpegAudioLayer.FrameHeader.len;\n        return this.skipSideInformation();\n      }\n\n      if (this.frameCount === 3) {\n        // the stream is CBR if the first 3 frame bitrates are the same\n        if (this.areAllSame(this.bitrates)) {\n          // subtract non audio stream data from duration calculation\n          const size = this.tokenizer.fileSize - this.headerSize;\n          this.format.duration = (size * 8) / header.bitrate;\n          this.format.codecProfile = \"CBR\";\n          return; // Done\n        } else if (!this.readDuration) {\n          return; // Done\n        }\n      }\n\n      // once we know the file is VBR attach listener to end of\n      // stream so we can do the duration calculation when we\n      // have counted all the frames\n      if (this.readDuration && this.frameCount === 4) {\n        this.samplesPerFrame = samples_per_frame;\n        this.calculateVbrDuration = true;\n      }\n\n      this.offset = 4;\n      if (header.isProtectedByCRC) {\n        return this.parseCrc();\n      } else {\n        return this.skipSideInformation();\n      }\n    });\n  }\n\n  public parseCrc(): Promise<void> {\n    this.tokenizer.readNumber(Token.INT16_BE).then((crc) => {\n      this.crc = crc;\n    });\n    this.offset += 2;\n    return this.skipSideInformation();\n  }\n\n  public skipSideInformation(): Promise<void> {\n    const sideinfo_length = this.audioFrameHeader.calculateSideInfoLength();\n    // side information\n    return this.tokenizer.readToken(new BufferType(sideinfo_length)).then(() => {\n      this.offset += sideinfo_length;\n      return this.readXtraInfoHeader();\n    });\n  }\n\n  public readXtraInfoHeader(): Promise<any> {\n\n    return this.tokenizer.readToken(MpegAudioLayer.InfoTagHeaderTag).then((headerTag) => {\n      this.offset += MpegAudioLayer.InfoTagHeaderTag.len;  // 12\n\n      switch (headerTag) {\n\n        case 'Info':\n          this.format.codecProfile = 'CBR';\n          return this.readXingInfoHeader();\n\n        case 'Xing':\n          return this.readXingInfoHeader().then((infoTag) => {\n            this.format.codecProfile = MpegAudioLayer.getVbrCodecProfile(infoTag.vbrScale);\n            return null;\n          });\n\n        case 'Xtra':\n          // ToDo: ???\n          break;\n\n        case 'LAME':\n          return this.tokenizer.readToken(MpegAudioLayer.LameEncoderVersion).then((version) => {\n            this.offset += MpegAudioLayer.LameEncoderVersion.len;\n            this.format.encoder = \"LAME \" + version;\n            return this.skipFrameData(this.frame_size - this.offset);\n          });\n        // ToDo: ???\n      }\n\n      // ToDo: promise duration???\n      const frameDataLeft = this.frame_size - this.offset;\n      return this.skipFrameData(frameDataLeft);\n    });\n  }\n\n  /**\n   * Ref: http://gabriel.mp3-tech.org/mp3infotag.html\n   * @returns {Promise<string>}\n   */\n  private readXingInfoHeader(): Promise<IXingInfoTag> {\n\n    return this.tokenizer.readToken<IXingInfoTag>(MpegAudioLayer.XingInfoTag).then((infoTag) => {\n      this.offset += MpegAudioLayer.XingInfoTag.len;  // 12\n\n      this.format.encoder = Common.stripNulls(infoTag.encoder);\n\n      if ((infoTag.headerFlags[3] & 0x01) === 1) {\n        this.format.duration = this.audioFrameHeader.calcDuration(infoTag.numFrames);\n        return infoTag; // Done\n      }\n\n      // frames field is not present\n      const frameDataLeft = this.frame_size - this.offset;\n\n      // ToDo: promise duration???\n      return this.skipFrameData(frameDataLeft).then(() => {\n        return infoTag;\n      });\n    });\n  }\n\n  private skipFrameData(frameDataLeft: number): Promise<void> {\n    return this.tokenizer.readToken(new Token.IgnoreType(frameDataLeft)).then(() => {\n      this.countSkipFrameData += frameDataLeft;\n      return this.sync();\n    });\n  }\n\n  private areAllSame(array) {\n    const first = array[0];\n    return array.every((element) => {\n      return element === first;\n    });\n  }\n}\n"]}