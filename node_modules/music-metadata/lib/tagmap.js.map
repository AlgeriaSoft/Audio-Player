{"version":3,"file":"tagmap.js","sourceRoot":"","sources":["../src/tagmap.ts"],"names":[],"mappings":";;AAAA,6CAA0C;AAC1C,mDAAgD;AAChD,qDAAkD;AAClD,qDAAkD;AAClD,6CAA0C;AAC1C,sDAAmD;AACnD,mDAAgD;AAwChD;;GAEG;AACH;IAsHE;QACE,+CAA+C;QAC/C,IAAI,CAAC,QAAQ,GAAG;YACd,GAAG,EAAE,qBAAS;YACd,KAAK,EAAE,MAAM,CAAC,cAAc,CAAC,yBAAW,CAAC;YACzC,SAAS,EAAE,yBAAW;YACtB,SAAS,EAAE,2BAAY;YACvB,SAAS,EAAE,2BAAY;YACvB,SAAS,EAAE,2BAAY;YACvB,YAAY,EAAE,qBAAS;YACvB,MAAM,EAAE,2BAAY;SACrB,CAAC;IACJ,CAAC;IAhIa,mBAAY,GAA1B,UAA2B,GAAc;QACvC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;IAChC,CAAC;IAEa,kBAAW,GAAzB,UAA0B,GAAW;QACnC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,SAAS,CAAC;IAC9C,CAAC;IAED;;;OAGG;IACW,kBAAW,GAAzB,UAA0B,KAAgB;QACxC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC;IACvF,CAAC;IA0Fc,qBAAc,GAA7B,UAA8B,GAAkB;QAC9C,IAAM,MAAM,GAAkB,EAAE,CAAC;QACjC,GAAG,CAAC,CAAC,IAAM,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC;YACtB,EAAE,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC5B,MAAM,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;YACvC,CAAC;QACH,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IAkBD;;;;;OAKG;IACI,kCAAiB,GAAxB,UAAyB,IAAI,EAAE,GAAG;QAChC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACb,KAAK,QAAQ;gBACX,MAAM,CAAC,IAAI,CAAC;YACd,KAAK,SAAS;gBACZ,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACZ,KAAK,MAAM;wBACT,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;YACH,KAAK,SAAS;gBACZ,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACZ,KAAK,MAAM,CAAC;oBACZ,KAAK,MAAM;wBACT,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;QACL,CAAC;QACD,IAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;QAC5C,MAAM,CAAC,KAAK,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC;IACrD,CAAC;IAED;;;;OAIG;IACI,8BAAa,GAApB,UAAqB,IAAgB,EAAE,GAAW;QAChD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACzB,MAAM,IAAI,KAAK,CAAC,6BAA6B,GAAG,IAAI,CAAC,CAAC;QACxD,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,OAAO,GAAG,GAAG,CAAC,WAAW,EAAE,GAAG,GAAG,CAAC,CAAC;IACzE,CAAC;IAtJc,iBAAU,GACzB;QACE,IAAI,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QACvB,KAAK,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QACxB,IAAI,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QAEvB,KAAK,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QACxB,MAAM,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QACzB,OAAO,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAC;QACzB,WAAW,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QAC9B,KAAK,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QACxB,IAAI,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QACvB,YAAY,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QAC/B,YAAY,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QAC/B,OAAO,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAC;QACzB,KAAK,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAC;QACvB,OAAO,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAC;QACzB,QAAQ,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAC;QAC1B,MAAM,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAC;QACxB,SAAS,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QAC5B,SAAS,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QAC5B,IAAI,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QACvB,UAAU,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QAC7B,eAAe,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QAClC,YAAY,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAC;QAC9B,QAAQ,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAC;QAC1B,MAAM,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAC;QACxB,SAAS,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAC;QAC3B,OAAO,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAC;QACzB,QAAQ,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAC;QAC1B,QAAQ,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAC;QAC1B,QAAQ,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAC;QAC1B,OAAO,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAC;QACzB,KAAK,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAC;QACvB,KAAK,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QACxB,QAAQ,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QAC3B,QAAQ,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QAC3B,YAAY,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QAC/B,WAAW,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QAC9B,UAAU,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QAC7B,WAAW,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QAC9B,OAAO,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QAC1B,GAAG,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QACtB,IAAI,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QACvB,KAAK,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QACxB,aAAa,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QAChC,IAAI,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QACvB,QAAQ,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QAC3B,OAAO,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QAC1B,UAAU,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QAC7B,aAAa,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QAChC,WAAW,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAC;QAC7B,cAAc,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QACjC,MAAM,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QACzB,QAAQ,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QAC3B,SAAS,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QAC5B,OAAO,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QAC1B,SAAS,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QAC5B,eAAe,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QAClC,OAAO,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QAC1B,OAAO,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QAC1B,IAAI,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QACvB,IAAI,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QACvB,uBAAuB,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QAC1C,mBAAmB,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QACtC,mBAAmB,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QACtC,oBAAoB,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAC;QACtC,yBAAyB,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAC;QAC3C,0BAA0B,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QAC7C,kBAAkB,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QACrC,iBAAiB,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QACpC,kBAAkB,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QACrC,WAAW,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QAC9B,oBAAoB,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QACvC,YAAY,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QAC/B,mBAAmB,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QACtC,OAAO,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QAC1B,sBAAsB,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAC;QACxC,YAAY,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QAC/B,SAAS,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QAC5B,KAAK,EAAE,EAAC,QAAQ,EAAE,IAAI,EAAC;QAEvB,GAAG,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QACtB,aAAa,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;QAChC,cAAc,EAAE,EAAC,QAAQ,EAAE,KAAK,EAAC;KAElC,CAAC;IAiEJ,aAAC;CAAA,AAzKD,IAyKC;kBAzKoB,MAAM","sourcesContent":["import {AsfTagMap} from \"./asf/AsfTagMap\";\nimport {ID3v1TagMap} from \"./id3v1/ID3v1TagMap\";\nimport {ID3v22TagMap} from \"./id3v2/ID3v22TagMap\";\nimport {ID3v24TagMap} from \"./id3v2/ID3v24TagMap\";\nimport {MP4TagMap} from \"./mp4/MP4TagMap\";\nimport {VorbisTagMap} from \"./vorbis/VorbisTagMap\";\nimport {APEv2TagMap} from \"./apev2/APEv2TagMap\";\nexport type HeaderType = 'vorbis' | 'id3v1.1'| 'id3v2.2' | 'id3v2.3' | 'id3v2.4' | 'APEv2' | 'asf' | 'iTunes MP4';\n\nexport type CommonTag = 'track' | 'disk' | 'year' | 'title' | 'artist' | 'artists' | 'albumartist' | 'album' | 'date' | 'originaldate' |\n  'originalyear' | 'comment' | 'genre' | 'picture' | 'composer' | 'lyrics' | 'albumsort' | 'titlesort' | 'work' |\n  'artistsort' | 'albumartistsort' | 'composersort' | 'lyricist' | 'writer' | 'conductor' | 'remixer' |\n  'arranger' | 'engineer' | 'producer' | 'djmixer' | 'mixer' | 'label' | 'grouping' | 'subtitle' |\n  'discsubtitle' | 'totaltracks' | 'totaldiscs' | 'compilation' | '_rating' | 'bpm' |\n  'mood' | 'media' | 'catalognumber' | 'show' | 'showsort' | 'podcast' | 'podcasturl' |\n  'releasestatus' | 'releasetype' | 'releasecountry' | 'script' | 'language' |\n  'copyright' | 'license' | 'encodedby' | 'encodersettings' | 'gapless' | 'barcode' |\n  'isrc' | 'asin' | 'musicbrainz_recordingid' | 'musicbrainz_trackid' | 'musicbrainz_albumid' |\n  'musicbrainz_artistid' | 'musicbrainz_albumartistid' | 'musicbrainz_releasegroupid' |\n  'musicbrainz_workid' | 'musicbrainz_trmid' | 'musicbrainz_discid' | 'acoustid_id' |\n  'acoustid_fingerprint' | 'musicip_puid' | 'musicip_fingerprint' | 'website' | 'performer:instrument' |\n  'peakLevel' | 'averageLevel' | 'notes' | 'key'| 'originalalbum' | 'originalartist';\n\nexport interface INativeTagMap {\n  [index: string]: CommonTag;\n}\n\nexport interface ITagInfo {\n  multiple: boolean;\n}\n\nexport interface ITagInfoMap {\n  [index: string]: ITagInfo;\n}\n\ninterface INativeTagMappings {\n  asf: INativeTagMap,\n  APEv2: INativeTagMap,\n  'id3v1.1': INativeTagMap,\n  'id3v2.2': INativeTagMap,\n  'id3v2.3': INativeTagMap,\n  'id3v2.4': INativeTagMap,\n  'iTunes MP4': INativeTagMap,\n  vorbis: INativeTagMap\n}\n\n/**\n * tagmap maps native meta tags to generic common types\n */\nexport default class TagMap {\n\n  public static getCommonTag(tag: CommonTag): ITagInfo {\n    return TagMap.commonTags[tag];\n  }\n\n  public static isCommonTag(tag: string): boolean {\n    return TagMap.commonTags[tag] !== undefined;\n  }\n\n  /**\n   * @param alias Name of common tag\n   * @returns {boolean|*} true if given alias is mapped as a singleton', otherwise false\n   */\n  public static isSingleton(alias: CommonTag): boolean {\n    return TagMap.commonTags.hasOwnProperty(alias) && !TagMap.commonTags[alias].multiple;\n  }\n\n  private static commonTags: ITagInfoMap =\n  {\n    year: {multiple: false},\n    track: {multiple: false},\n    disk: {multiple: false},\n\n    title: {multiple: false},\n    artist: {multiple: false},\n    artists: {multiple: true},\n    albumartist: {multiple: false},\n    album: {multiple: false},\n    date: {multiple: false},\n    originaldate: {multiple: false},\n    originalyear: {multiple: false},\n    comment: {multiple: true},\n    genre: {multiple: true},\n    picture: {multiple: true},\n    composer: {multiple: true},\n    lyrics: {multiple: true},\n    albumsort: {multiple: false},\n    titlesort: {multiple: false},\n    work: {multiple: false},\n    artistsort: {multiple: false},\n    albumartistsort: {multiple: false},\n    composersort: {multiple: true},\n    lyricist: {multiple: true},\n    writer: {multiple: true},\n    conductor: {multiple: true},\n    remixer: {multiple: true},\n    arranger: {multiple: true},\n    engineer: {multiple: true},\n    producer: {multiple: true},\n    djmixer: {multiple: true},\n    mixer: {multiple: true},\n    label: {multiple: false},\n    grouping: {multiple: false},\n    subtitle: {multiple: false},\n    discsubtitle: {multiple: false},\n    totaltracks: {multiple: false},\n    totaldiscs: {multiple: false},\n    compilation: {multiple: false},\n    _rating: {multiple: false},\n    bpm: {multiple: false},\n    mood: {multiple: false},\n    media: {multiple: false},\n    catalognumber: {multiple: false},\n    show: {multiple: false},\n    showsort: {multiple: false},\n    podcast: {multiple: false},\n    podcasturl: {multiple: false},\n    releasestatus: {multiple: false},\n    releasetype: {multiple: true},\n    releasecountry: {multiple: false},\n    script: {multiple: false},\n    language: {multiple: false},\n    copyright: {multiple: false},\n    license: {multiple: false},\n    encodedby: {multiple: false},\n    encodersettings: {multiple: false},\n    gapless: {multiple: false},\n    barcode: {multiple: false},\n    isrc: {multiple: false},\n    asin: {multiple: false},\n    musicbrainz_recordingid: {multiple: false},\n    musicbrainz_trackid: {multiple: false},\n    musicbrainz_albumid: {multiple: false},\n    musicbrainz_artistid: {multiple: true},\n    musicbrainz_albumartistid: {multiple: true},\n    musicbrainz_releasegroupid: {multiple: false},\n    musicbrainz_workid: {multiple: false},\n    musicbrainz_trmid: {multiple: false},\n    musicbrainz_discid: {multiple: false},\n    acoustid_id: {multiple: false},\n    acoustid_fingerprint: {multiple: false},\n    musicip_puid: {multiple: false},\n    musicip_fingerprint: {multiple: false},\n    website: {multiple: false},\n    'performer:instrument': {multiple: true},\n    averageLevel: {multiple: false},\n    peakLevel: {multiple: false},\n    notes: {multiple: true},\n\n    key: {multiple: false},\n    originalalbum: {multiple: false},\n    originalartist: {multiple: false}\n\n  };\n\n  private static capitalizeTags(map: INativeTagMap): INativeTagMap {\n    const newMap: INativeTagMap = {};\n    for (const tag in map) {\n      if (map.hasOwnProperty(tag)) {\n        newMap[tag.toUpperCase()] = map[tag];\n      }\n    }\n    return newMap;\n  }\n\n  private mappings: INativeTagMappings;\n\n  constructor() {\n    // Normalize (post-process) common tag mappings\n    this.mappings = {\n      asf: AsfTagMap,\n      APEv2: TagMap.capitalizeTags(APEv2TagMap), // capitalize 'APEv2' tags for case insensitive tag matching\n      'id3v1.1': ID3v1TagMap,\n      'id3v2.2': ID3v22TagMap,\n      'id3v2.3': ID3v24TagMap,\n      'id3v2.4': ID3v24TagMap,\n      'iTunes MP4': MP4TagMap,\n      vorbis: VorbisTagMap\n    };\n  }\n\n  /**\n   * Test if native tag headerType is a singleton\n   * @param type e.g.: 'iTunes MP4' | 'asf' | 'id3v1.1' | 'id3v2.4' | 'vorbis'\n   * @param  tag Native tag name', e.g. 'TITLE'\n   * @returns {boolean} true is we can safely assume that it is a  singleton\n   */\n  public isNativeSingleton(type, tag): boolean {\n    switch (type) {\n      case 'format':\n        return true;\n      case 'id3v2.3':\n        switch (tag) {\n          case 'IPLS':\n            return true;\n        }\n      case 'id3v2.4':\n        switch (tag) {\n          case 'TIPL':\n          case 'TMCL':\n            return true;\n        }\n    }\n    const alias = this.getCommonName(type, tag);\n    return alias && !TagMap.commonTags[alias].multiple;\n  }\n\n  /**\n   * @headerType Native header headerType: e.g.: 'm4a' | 'asf' | 'id3v1.1' | 'vorbis'\n   * @tag  Native header tag\n   * @return common tag name (alias)\n   */\n  public getCommonName(type: HeaderType, tag: string): CommonTag {\n    if (!this.mappings[type]) {\n      throw new Error('Illegal header headerType: ' + type);\n    }\n    return this.mappings[type][type === 'APEv2' ? tag.toUpperCase() : tag];\n  }\n}\n"]}