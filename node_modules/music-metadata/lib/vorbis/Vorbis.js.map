{"version":3,"file":"Vorbis.js","sourceRoot":"","sources":["../../src/vorbis/Vorbis.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Token from \"token-types\";\nimport {IGetToken} from \"token-types\";\nimport {AttachedPictureType} from \"../id3v2/ID3v2Parser\";\nimport {IPicture} from \"../index\";\n\nexport interface IVorbisPicture extends IPicture {\n  type: string\n  description: string,\n  width: number,\n  height: number,\n  colour_depth: number,\n  indexed_color: number\n}\n\n/**\n * Interface to parsed result of METADATA_BLOCK_PICTURE\n * Ref: https://wiki.xiph.org/VorbisComment#METADATA_BLOCK_PICTURE\n * Ref: https://xiph.org/flac/format.html#metadata_block_picture\n */\nexport interface IVorbisPicture {\n  // The picture type according to the ID3v2 APIC frame\n  type: string,\n  // The picture MIME type string\n  format: string,\n  // The description of the picture, in UTF-8.\n  description: string,\n  // The width of the picture in pixels.\n  width: number,\n  // The height of the picture in pixels.\n  height: number,\n  // The color depth of the picture in bits-per-pixel.\n  colour_depth: number,\n  // For indexed-color pictures (e.g. GIF), the number of colors used, or 0 for non-indexed pictures.\n  indexed_color: number,\n  // The binary picture data.\n  data: Buffer;\n}\n\n/**\n * Parse the METADATA_BLOCK_PICTURE\n * Ref: https://wiki.xiph.org/VorbisComment#METADATA_BLOCK_PICTURE\n * Ref: https://xiph.org/flac/format.html#metadata_block_picture\n * // ToDo: move to ID3 / APIC?\n */\nexport class VorbisPictureToken implements IGetToken<IVorbisPicture> {\n\n  public static fromBase64(base64str: string): IVorbisPicture {\n    return this.fromBuffer(new Buffer(base64str, 'base64'));\n  }\n\n  public static fromBuffer(buffer: Buffer): IVorbisPicture {\n    const pic = new VorbisPictureToken(buffer.length);\n    return pic.get(buffer, 0);\n  }\n  constructor(public len) {\n  }\n\n  public get(buffer: Buffer, offset: number): IVorbisPicture {\n\n    const type = AttachedPictureType[Token.UINT32_BE.get(buffer, offset)];\n\n    const mimeLen = Token.UINT32_BE.get(buffer, offset += 4);\n    const format = buffer.toString('utf-8', offset += 4, offset + mimeLen);\n\n    const descLen = Token.UINT32_BE.get(buffer, offset += mimeLen);\n    const description = buffer.toString('utf-8', offset += 4, offset + descLen);\n\n    const width = Token.UINT32_BE.get(buffer, offset += descLen);\n    const height = Token.UINT32_BE.get(buffer, offset += 4);\n    const colour_depth = Token.UINT32_BE.get(buffer, offset += 4);\n    const indexed_color = Token.UINT32_BE.get(buffer, offset += 4);\n\n    const picDataLen = Token.UINT32_BE.get(buffer, offset += 4);\n    const data = new Buffer(buffer.slice(offset += 4, offset + picDataLen));\n\n    return {\n      type,\n      format,\n      description,\n      width,\n      height,\n      colour_depth,\n      indexed_color,\n      data\n    };\n  }\n}\n\n/**\n * Vorbis 1 decoding tokens\n * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-620004.2.1\n */\n\n/**\n * Comment header interface\n * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-620004.2.1\n */\nexport interface ICommonHeader {\n  /**\n   * Packet Type\n   */\n  packetType: number,\n  /**\n   * Should be 'vorbis'\n   */\n  vorbis: string\n}\n\n/**\n * Comment header decoder\n * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-620004.2.1\n */\nexport const CommonHeader: Token.IGetToken<ICommonHeader> = {\n  len: 7,\n\n  get: (buf, off): ICommonHeader => {\n    return {\n      packetType: buf.readUInt8(off),\n      vorbis: new Token.StringType(6, 'ascii').get(buf, off + 1)\n    };\n  }\n};\n\n/**\n * Identification header interface\n * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-630004.2.2\n * @type {{len: number; get: ((buf, off)=>IFormatInfo)}}\n */\nexport interface IFormatInfo {\n  version: number,\n  channelMode: number,\n  sampleRate: number,\n  bitrateMax: number,\n  bitrateNominal: number,\n  bitrateMin: number\n}\n\n/**\n * Identification header decoder\n * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-630004.2.2\n * @type {{len: number; get: ((buf, off)=>IFormatInfo)}}\n */\nexport const IdentificationHeader: Token.IGetToken<IFormatInfo> = {\n  len: 23,\n\n  get: (buf, off): IFormatInfo => {\n    return {\n      version: buf.readUInt32LE(off + 0),\n      channelMode: buf.readUInt8(off + 4),\n      sampleRate: buf.readUInt32LE(off + 5),\n      bitrateMax: buf.readUInt32LE(off + 9),\n      bitrateNominal: buf.readUInt32LE(off + 13),\n      bitrateMin: buf.readUInt32LE(off + 17)\n    };\n  }\n};\n"]}