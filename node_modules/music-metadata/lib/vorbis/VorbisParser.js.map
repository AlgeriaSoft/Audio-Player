{"version":3,"file":"VorbisParser.js","sourceRoot":"","sources":["../../src/vorbis/VorbisParser.ts"],"names":[],"mappings":"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","sourcesContent":["'use strict';\nimport * as Vorbis from './Vorbis';\nimport ReadableStream = NodeJS.ReadableStream;\nimport {ITokenParser} from \"../ParserFactory\";\nimport * as strtok3 from \"strtok3\";\nimport {IFormat, INativeAudioMetadata, IOptions, ITag} from \"../index\";\nimport {Promise} from \"es6-promise\";\nimport {StreamReader} from \"then-read-stream\";\nimport * as Token from \"token-types\";\n\n/**\n * Vorbis 1 Parser.\n * Used by OggParser\n */\nexport class VorbisParser implements ITokenParser {\n\n  private format: IFormat = {\n    headerType: 'vorbis'\n  };\n\n  private tags: ITag[] = [];\n\n  private tokenizer: strtok3.ITokenizer;\n  private options: IOptions;\n\n  public parse(tokenizer: strtok3.ITokenizer, options: IOptions): Promise<INativeAudioMetadata> {\n\n    this.tokenizer = tokenizer;\n    this.options = options;\n\n    return this.parseHeaderPacket().then(() => {\n      return {\n        format: this.format,\n        native: {\n          vorbis: this.tags\n        }\n      };\n    });\n  }\n\n  /**\n   * Vorbis 1 parser\n   * @param pageLength\n   * @returns {Promise<void>}\n   */\n  private parseHeaderPacket(): Promise<boolean> {\n\n    return this.tokenizer.readToken<Vorbis.ICommonHeader>(Vorbis.CommonHeader).then((header) => {\n      if (header.vorbis !== 'vorbis')\n        throw new Error('Metadata does not look like Vorbis');\n\n      return this.parsePacket(header.packetType).then((res) => {\n        if (!res.done) {\n          return this.parseHeaderPacket();\n        }\n        return res.done;\n      });\n    }).catch((err) => {\n      if (err === StreamReader.EndOfStream) {\n        return true;\n      } else\n        throw err;\n    });\n  }\n\n  private parsePacket(packetType: number): Promise<{ len: number, done: boolean }> {\n    switch (packetType) {\n\n      case 1: //  type 1: the identification header\n        return this.parseVorbisInfo().then((len) => {\n          return {len, done: false};\n        });\n\n      case 3: //  type 3: comment header\n        return this.parseUserCommentList().then((len) => {\n          return {len, done: true};\n        });\n\n      case 5: // type 5: setup header type\n        throw new Error(\"'setup header type' not implemented\");\n    }\n  }\n\n  private parseVorbisInfo(): Promise<number> {\n    return this.tokenizer.readToken<Vorbis.IFormatInfo>(Vorbis.IdentificationHeader).then((vi) => {\n      this.format.sampleRate = vi.sampleRate;\n      this.format.bitrate = vi.bitrateNominal;\n      this.format.numberOfChannels = vi.channelMode;\n      return Vorbis.IdentificationHeader.len;\n    });\n  }\n\n  /**\n   * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-840005.2\n   * @returns {Promise<number>}\n   */\n  private parseUserCommentList(): Promise<number> {\n\n    return this.tokenizer.readToken<number>(Token.UINT32_LE).then((strLen) => {\n      return this.tokenizer.readToken<string>(new Token.StringType(strLen, 'utf-8')).then((vendorString: string) => {\n        return this.tokenizer.readToken<number>(Token.UINT32_LE).then((userCommentListLength) => {\n          return this.parseUserComment(userCommentListLength).then((len) => {\n            return 2 * Token.UINT32_LE.len + strLen + len;\n          });\n        });\n      });\n    });\n  }\n\n  private parseUserComment(userCommentListLength: number): Promise<number> {\n    return this.tokenizer.readToken<number>(Token.UINT32_LE).then((strLen) => {\n      return this.tokenizer.readToken<string>(new Token.StringType(strLen, 'ascii')).then((v) => {\n        const idx = v.indexOf('=');\n        const key = v.slice(0, idx).toUpperCase();\n        let value: any = v.slice(idx + 1);\n\n        if (key === 'METADATA_BLOCK_PICTURE') {\n          value = this.options.skipCovers ? null : Vorbis.VorbisPictureToken.fromBase64(value);\n        }\n\n        if (value !== null)\n          this.tags.push({id: key, value});\n\n        const len = Token.UINT32_LE.len + strLen;\n        if (--userCommentListLength > 0) {\n          // if we don't want to read the duration\n          // then tell the parent stream to stop\n          // stop = !readDuration;\n          return this.parseUserComment(userCommentListLength).then((recLen) => {\n            return len + recLen;\n          });\n        }\n        return strLen;\n      });\n    });\n  }\n}\n"]}