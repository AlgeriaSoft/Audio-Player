{"version":3,"file":"Chunk.js","sourceRoot":"","sources":["../../src/aiff/Chunk.ts"],"names":[],"mappings":";;AAAA,mCAAqC;AACrC,+BAAiC;AAcjC;;GAEG;AACU,QAAA,MAAM,GAAkC;IACnD,GAAG,EAAE,CAAC;IAEN,GAAG,EAAE,UAAC,GAAG,EAAE,GAAG;QACZ,MAAM,CAAC;YACL,WAAW;YACX,OAAO,EAAE,IAAI,KAAK,CAAC,UAAU,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC;YACvD,OAAO;YACP,IAAI,EAAE,GAAG,CAAC,YAAY,CAAC,GAAG,GAAG,CAAC,CAAC;SAChC,CAAC;IACJ,CAAC;CACF,CAAC;AAcF;IAIE,gBAAmB,MAAoB;QACrC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,IAAI,EAAE,EAAE,wCAAwC,CAAC,CAAC;QACvE,IAAI,CAAC,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC;IACzB,CAAC;IAEM,oBAAG,GAAV,UAAW,GAAW,EAAE,GAAW;QACjC,MAAM,CAAC;YACL,WAAW,EAAE,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC;YAClC,eAAe,EAAE,GAAG,CAAC,YAAY,CAAC,GAAG,GAAG,CAAC,CAAC;YAC1C,UAAU,EAAE,GAAG,CAAC,YAAY,CAAC,GAAG,GAAG,CAAC,CAAC;YACrC,mEAAmE;YACnE,UAAU,EAAE,GAAG,CAAC,YAAY,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;SAC1C,CAAC;IACJ,CAAC;IAEH,aAAC;AAAD,CAAC,AAnBD,IAmBC;AAnBY,wBAAM","sourcesContent":["import * as Token from \"token-types\";\nimport * as assert from \"assert\";\n\nexport interface IChunkHeader {\n\n  /**\n   * \tA chunk ID (ie, 4 ASCII bytes)\n   */\n  chunkID: string,\n  /**\n   * Number of data bytes following this data header\n   */\n  size: number\n}\n\n/**\n * Common AIFF chunk header\n */\nexport const Header: Token.IGetToken<IChunkHeader> = {\n  len: 8,\n\n  get: (buf, off): IChunkHeader => {\n    return {\n      // Group-ID\n      chunkID: new Token.StringType(4, 'ascii').get(buf, off),\n      // Size\n      size: buf.readUInt32BE(off + 4)\n    };\n  }\n};\n\n/**\n * The Common Chunk.\n * Describes fundamental parameters of the waveform data such as sample rate, bit resolution, and how many channels of\n * digital audio are stored in the FORM AIFF.\n */\nexport interface ICommon {\n  numChannels: number,\n  numSampleFrames: number,\n  sampleSize: number,\n  sampleRate: number,\n}\n\nexport class Common implements Token.IGetToken<ICommon> {\n\n  public len: number;\n\n  public constructor(header: IChunkHeader) {\n    assert.ok(header.size >= 18, \"chunkSize should always be at least 18\");\n    this.len = header.size;\n  }\n\n  public get(buf: Buffer, off: number): ICommon {\n    return {\n      numChannels: buf.readUInt16BE(off),\n      numSampleFrames: buf.readUInt32BE(off + 2),\n      sampleSize: buf.readUInt16BE(off + 6),\n      // see: https://cycling74.com/forums/aiffs-80-bit-sample-rate-value\n      sampleRate: buf.readUInt16BE(off + 8 + 2)\n    };\n  }\n\n}\n"]}