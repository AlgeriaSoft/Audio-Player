{"version":3,"file":"AiffParser.js","sourceRoot":"","sources":["../../src/aiff/AiffParser.ts"],"names":[],"mappings":"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","sourcesContent":["import {ITokenParser} from \"../ParserFactory\";\nimport {EndOfFile, ITokenizer} from \"strtok3\";\nimport * as strtok3 from \"strtok3\";\nimport {IOptions, INativeAudioMetadata, IFormat} from \"../\";\nimport * as Token from \"token-types\";\nimport * as Chunk from \"./Chunk\";\nimport {Readable} from \"stream\";\nimport {ID3v2Parser} from \"../id3v2/ID3v2Parser\";\n\n/**\n * AIFF - Audio Interchange File Format\n *\n * Ref:\n *  http://www.onicos.com/staff/iz/formats/aiff.html\n *  http://muratnkonar.com/aiff/index.html\n */\nexport class AIFFParser implements ITokenParser {\n\n  private tokenizer: ITokenizer;\n  private options: IOptions;\n\n  private metadata: INativeAudioMetadata = {\n    format: {\n      dataformat: \"AIFF\"\n    },\n    native: {}\n  };\n\n  private native: INativeAudioMetadata;\n\n  public parse(tokenizer: ITokenizer, options: IOptions): Promise<INativeAudioMetadata> {\n\n    this.tokenizer = tokenizer;\n    this.options = options;\n\n    return this.tokenizer.readToken<Chunk.IChunkHeader>(Chunk.Header)\n      .then((header) => {\n        if (header.chunkID !== 'FORM')\n          return null; // Not AIFF format\n\n        return this.tokenizer.readToken<string>(new Token.StringType(4, 'ascii')).then((type) => {\n          this.metadata.format.dataformat = type;\n        }).then(() => {\n          return this.readChunk().then(() => {\n            return null;\n          });\n        });\n      })\n      .catch((err) => {\n        if (err === EndOfFile) {\n          return this.metadata;\n        } else {\n          throw err;\n        }\n      });\n  }\n\n  public readChunk(): Promise<void> {\n    return this.tokenizer.readToken<Chunk.IChunkHeader>(Chunk.Header)\n      .then((header) => {\n        switch (header.chunkID) {\n\n          case 'COMM': // The Common Chunk\n            return this.tokenizer.readToken<Chunk.ICommon>(new Chunk.Common(header))\n              .then((common) => {\n                this.metadata.format.bitsPerSample = common.sampleSize;\n                this.metadata.format.sampleRate = common.sampleRate;\n                this.metadata.format.numberOfChannels = common.numChannels;\n                this.metadata.format.numberOfSamples = common.numSampleFrames;\n                this.metadata.format.duration = this.metadata.format.numberOfSamples / this.metadata.format.sampleRate;\n              });\n\n          case 'ID3 ': // ID3-meta-data\n            return this.tokenizer.readToken<Buffer>(new Token.BufferType(header.size))\n              .then((id3_data) => {\n                const id3stream = new ID3Stream(id3_data);\n                return strtok3.fromStream(id3stream).then((rst) => {\n                  return ID3v2Parser.getInstance().parse(rst, this.options).then((id3) => {\n                    this.metadata.format.headerType = id3.format.headerType;\n                    this.metadata.native = id3.native;\n                  });\n                });\n              });\n\n          case 'SSND': // Sound Data Chunk\n          default:\n            return this.tokenizer.ignore(header.size);\n\n        }\n      }).then(() => {\n        return this.readChunk();\n      });\n  }\n\n}\n\nclass ID3Stream extends Readable {\n\n  constructor(private buf: Buffer) {\n    super();\n  }\n\n  public _read() {\n    this.push(this.buf);\n    this.push(null); // push the EOF-signaling `null` chunk\n  }\n}\n"]}