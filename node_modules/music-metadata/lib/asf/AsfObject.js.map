{"version":3,"file":"AsfObject.js","sourceRoot":"","sources":["../../src/asf/AsfObject.ts"],"names":[],"mappings":"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","sourcesContent":["// ASF Objects\n\n'use strict';\nimport common from '../common';\nimport ReadableStream = NodeJS.ReadableStream;\nimport {IPicture, ITag} from \"../index\";\nimport * as Token from \"token-types\";\nimport GUID from \"./GUID\";\nimport {Util} from \"./Util\";\nimport {IGetToken} from \"token-types\";\nimport {AttachedPictureType} from \"../id3v2/ID3v2Parser\";\n\n/**\n * Ref: https://msdn.microsoft.com/en-us/library/windows/desktop/ee663575\n */\nexport interface IAsfObjectHeader {\n\n  /**\n   * A GUID that identifies the object. 128 bits\n   */\n  objectId: GUID,\n\n  /**\n   * The size of the object (64-bits)\n   */\n  objectSize: number,\n}\n\n/**\n * Interface for: 3. ASF top-level Header Object\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3\n */\nexport interface IAsfTopLevelObjectHeader extends IAsfObjectHeader {\n  numberOfHeaderObjects: number\n}\n\n/**\n * Token for: 3. ASF top-level Header Object\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3\n */\nexport const TopLevelHeaderObjectToken: Token.IGetToken<IAsfTopLevelObjectHeader> = {\n\n  len: 30,\n\n  get: (buf, off): IAsfTopLevelObjectHeader => {\n    return {\n      objectId: GUID.fromBin(new Token.BufferType(16).get(buf, off)),\n      objectSize: Util.readUInt64LE(buf, off + 16),\n      numberOfHeaderObjects: Token.UINT32_LE.get(buf, off + 24)\n      // Reserved: 2 bytes\n    };\n  }\n};\n\n/**\n * Token for: 3.1 Header Object (mandatory, one only)\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_1\n */\nexport const HeaderObjectToken: Token.IGetToken<IAsfObjectHeader> = {\n\n  len: 24,\n\n  get: (buf, off): IAsfObjectHeader => {\n    return {\n      objectId: GUID.fromBin(new Token.BufferType(16).get(buf, off)),\n      objectSize: Util.readUInt64LE(buf, off + 16)\n    };\n  }\n};\n\nabstract class State<T> implements Token.IGetToken<T> {\n\n  public len: number;\n\n  constructor(header: IAsfObjectHeader) {\n    this.len = header.objectSize - HeaderObjectToken.len;\n  }\n\n  public abstract get(buf: Buffer, off: number): T;\n}\n\n// ToDo: use ignore type\nexport class IgnoreObjectState extends State<any> {\n\n  constructor(header: IAsfObjectHeader) {\n    super(header);\n  }\n\n  public get(buf: Buffer, off: number): null {\n    return null;\n  }\n}\n\n/**\n * Interface for: 3.2: File Properties Object (mandatory, one only)\n *\n * The File Properties Object defines the global characteristics of the combined digital media streams found within the Data Object.\n */\nexport interface IFilePropertiesObject {\n\n  /**\n   * Specifies the unique identifier for this file.\n   * The value of this field shall be regenerated every time the file is modified in any way.\n   * The value of this field shall be identical to the value of the File ID field of the Data Object.\n   */\n  fileId: GUID,\n\n  /**\n   * Specifies the size, in bytes, of the entire file.\n   * The value of this field is invalid if the Broadcast Flag bit in the Flags field is set to 1.\n   */\n  fileSize: number,\n  /**\n   * Specifies the date and time of the initial creation of the file. The value is given as the number of 100-nanosecond\n   * intervals since January 1, 1601, according to Coordinated Universal Time (Greenwich Mean Time). The value of this\n   * field may be invalid if the Broadcast Flag bit in the Flags field is set to 1.\n   */\n  creationDate: number,\n  /**\n   * Specifies the number of Data Packet entries that exist within the Data Object. The value of this field is invalid\n   * if the Broadcast Flag bit in the Flags field is set to 1.\n   */\n  dataPacketsCount: number,\n  /**\n   * Specifies the time needed to play the file in 100-nanosecond units.\n   * This value should include the duration (estimated, if an exact value is unavailable) of the the last media object\n   * in the presentation. The value of this field is invalid if the Broadcast Flag bit in the Flags field is set to 1.\n   */\n  playDuration: number,\n  /**\n   * Specifies the time needed to send the file in 100-nanosecond units.\n   * This value should include the duration of the last packet in the content.\n   * The value of this field is invalid if the Broadcast Flag bit in the Flags field is set to 1.\n   * Players can ignore this value.\n   */\n  sendDuration: number,\n  /**\n   * Specifies the amount of time to buffer data before starting to play the file, in millisecond units.\n   * If this value is nonzero, the Play Duration field and all of the payload Presentation Time fields have been offset\n   * by this amount. Therefore, player software must subtract the value in the preroll field from the play duration and\n   * presentation times to calculate their actual values. It follows that all payload Presentation Time fields need to\n   * be at least this value.\n   */\n  preroll: number,\n  /**\n   * The flags\n   */\n  flags: {\n    /**\n     * Specifies, if set, that a file is in the process of being created (for example, for recording applications),\n     * and thus that various values stored in the header objects are invalid. It is highly recommended that\n     * post-processing be performed to remove this condition at the earliest opportunity.\n     */\n    broadcast: boolean,\n    /**\n     * Specifies, if set, that a file is seekable.\n     * Note that for files containing a single audio stream and a Minimum Data Packet Size field equal to the Maximum\n     * Data Packet Size field, this flag shall always be set to 1.\n     * For files containing a single audio stream and a video stream or mutually exclusive video streams,\n     * this flag is only set to 1 if the file contains a matching Simple Index Object for each regular video stream\n     * (that is, video streams that are not hidden according to the method described in section 8.2.2).\n     */\n    seekable: boolean\n  },\n  /**\n   * Specifies the minimum Data Packet size in bytes. In general, the value of this field is invalid if the Broadcast\n   * Flag bit in the Flags field is set to 1.\n   * However, for the purposes of this specification, the values for the Minimum Data Packet Size and Maximum Data\n   * Packet Size fields shall be set to the same value, and this value should be set to the packet size, even when the\n   * Broadcast Flag in the Flags field is set to 1.\n   */\n  minimumDataPacketSize: number,\n  /**\n   * Specifies the maximum Data Packet size in bytes.\n   * In general, the value of this field is invalid if the Broadcast Flag bit in the Flags field is set to 1.\n   * However, for the purposes of this specification, the values of the Minimum Data Packet Size and Maximum Data Packet\n   * Size fields shall be set to the same value,\n   * and this value should be set to the packet size, even when the Broadcast Flag field is set to 1.\n   */\n  maximumDataPacketSize: number,\n  /**\n   * Specifies the maximum instantaneous bit rate in bits per second for the entire file.\n   * This shall equal the sum of the bit rates of the individual digital media streams.\n   * It shall be noted that the digital media stream includes ASF data packetization overhead as well as digital media\n   * data in payloads.\n   * Only those streams that have a free-standing Stream Properties Object in the header shall have their bit rates\n   * included in the sum;\n   * streams whose Stream Properties Object exists as part of an Extended Stream Properties Object in the Header\n   * Extension Object shall not have their bit rates included in this sum, except when this value would otherwise be 0.\n   */\n  maximumBitrate: number,\n}\n\n/**\n * Token for: 3.2: File Properties Object (mandatory, one only)\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_2\n */\nexport class FilePropertiesObject extends State<IFilePropertiesObject> {\n\n  public static guid = GUID.FilePropertiesObject;\n\n  constructor(header: IAsfObjectHeader) {\n    super(header);\n  }\n\n  public get(buf: Buffer, off: number): IFilePropertiesObject {\n\n    return {\n      fileId: GUID.fromBin(buf, off),\n      fileSize: Util.readUInt64LE(buf, off + 16),\n      creationDate: Util.readUInt64LE(buf, off + 24),\n      dataPacketsCount: Util.readUInt64LE(buf, off + 32),\n      playDuration: Util.readUInt64LE(buf, off + 40),\n      sendDuration: Util.readUInt64LE(buf, off + 48),\n      preroll: Util.readUInt64LE(buf, off + 56),\n      flags: {\n        broadcast: common.strtokBITSET.get(buf, off + 64, 24),\n        seekable: common.strtokBITSET.get(buf, off + 64, 25)\n      },\n      // flagsNumeric: Token.UINT32_LE.get(buf, off + 64),\n      minimumDataPacketSize: Token.UINT32_LE.get(buf, off + 68),\n      maximumDataPacketSize: Token.UINT32_LE.get(buf, off + 72),\n      maximumBitrate: Token.UINT32_LE.get(buf, off + 76)\n    };\n  }\n}\n\n/**\n * Interface for: 3.3 Stream Properties Object (mandatory, one per stream)\n */\nexport interface IStreamPropertiesObject {\n\n  /**\n   * Stream Type\n   */\n  streamType: GUID,\n\n  /**\n   * Error Correction Type\n   */\n  errorCorrectionType: GUID,\n\n}\n\n/**\n * Token for: 3.3 Stream Properties Object (mandatory, one per stream)\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_3\n */\nexport class StreamPropertiesObject extends State<IStreamPropertiesObject> {\n\n  public static guid = GUID.StreamPropertiesObject;\n\n  public constructor(header: IAsfObjectHeader) {\n    super(header);\n  }\n\n  public get(buf: Buffer, off: number): IStreamPropertiesObject {\n\n    return {\n      streamType: GUID.fromBin(buf, off),\n      errorCorrectionType: GUID.fromBin(buf, off + 16)\n      // ToDo\n    };\n  }\n}\n\nexport interface IHeaderExtensionObject {\n  reserved1: GUID,\n  reserved2: number,\n  extensionData: Buffer\n}\n\n/**\n * 3.4: Header Extension Object (mandatory, one only)\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_4\n */\nexport class HeaderExtensionObject implements IGetToken<IHeaderExtensionObject> {\n\n  public static guid = GUID.HeaderExtensionObject;\n\n  public len: number;\n\n  public constructor(header: IAsfObjectHeader) {\n    this.len = 22;\n  }\n\n  public get(buf: Buffer, off: number): IHeaderExtensionObject {\n    const dataSize = buf.readUInt32LE(off + 18);\n    return {\n      reserved1: GUID.fromBin(buf, off),\n      reserved2: buf.readUInt16LE(off + 16),\n      extensionData: new Token.BufferType(dataSize).get(buf, off + 20)\n      // ToDo\n    };\n  }\n}\n\n/**\n * 3.10 Content Description Object (optional, one only)\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_10\n */\nexport class ContentDescriptionObjectState extends State<ITag[]> {\n\n  public static guid = GUID.ContentDescriptionObject;\n\n  private static contentDescTags = ['Title', 'Author', 'Copyright', 'Description', 'Rating'];\n\n  constructor(header: IAsfObjectHeader) {\n    super(header);\n  }\n\n  public get(buf: Buffer, off: number): ITag[] {\n\n    const tags: ITag[] = [];\n\n    let pos = off + 10;\n    for (let i = 0; i < ContentDescriptionObjectState.contentDescTags.length; ++i) {\n      const length = buf.readUInt16LE(off + i * 2);\n      if (length > 0) {\n        const tagName = ContentDescriptionObjectState.contentDescTags[i];\n        const end = pos + length;\n        tags.push({id: tagName, value: Util.parseUnicodeAttr(buf.slice(pos, end))});\n        pos = end;\n      }\n    }\n    return tags;\n  }\n}\n\n/**\n * 3.11 Extended Content Description Object (optional, one only)\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_11\n */\nexport class ExtendedContentDescriptionObjectState extends State<ITag[]> {\n\n  public static guid = GUID.ExtendedContentDescriptionObject;\n\n  constructor(header: IAsfObjectHeader) {\n    super(header);\n  }\n\n  public get(buf: Buffer, off: number): ITag[] {\n    const tags: ITag[] = [];\n    const attrCount = buf.readUInt16LE(off);\n    let pos = off + 2;\n    for (let i = 0; i < attrCount; i += 1) {\n      const nameLen = buf.readUInt16LE(pos);\n      pos += 2;\n      const name = Util.parseUnicodeAttr(buf.slice(pos, pos + nameLen));\n      pos += nameLen;\n      const valueType = buf.readUInt16LE(pos);\n      pos += 2;\n      const valueLen = buf.readUInt16LE(pos);\n      pos += 2;\n      const value = buf.slice(pos, pos + valueLen);\n      pos += valueLen;\n      const parseAttr = Util.getParserForAttr(valueType);\n      if (!parseAttr) {\n        throw new Error('unexpected value headerType: ' + valueType);\n      }\n      tags.push({id: name, value: parseAttr(value)});\n    }\n    return tags;\n  }\n}\n\nexport interface IStreamName {\n  streamLanguageId: number,\n  streamName: string\n}\n\n/**\n * 4.1 Extended Stream Properties Object (optional, 1 per media stream)\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/04_objects_in_the_asf_header_extension_object.html#4_1\n */\nexport interface IExtendedStreamPropertiesObject {\n  startTime: number,\n  endTime: number,\n  dataBitrate: number,\n  bufferSize: number,\n  initialBufferFullness: number,\n  alternateDataBitrate: number,\n  alternateBufferSize: number,\n  alternateInitialBufferFullness: number,\n  maximumObjectSize: number,\n  flags: {\n    reliableFlag: boolean,\n    seekableFlag: boolean,\n    resendLiveCleanpointsFlag: boolean\n  },\n  // flagsNumeric: Token.UINT32_LE.get(buf, off + 64),\n  streamNumber: number,\n  streamLanguageId: number,\n  averageTimePerFrame: number,\n  streamNameCount: number,\n  payloadExtensionSystems: number,\n  streamNames: IStreamName[],\n  streamPropertiesObject: number\n}\n\n/**\n * 4.1 Extended Stream Properties Object (optional, 1 per media stream)\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/04_objects_in_the_asf_header_extension_object.html#4_1\n */\nexport class ExtendedStreamPropertiesObjectState extends State<IExtendedStreamPropertiesObject> {\n\n  public static guid = GUID.ExtendedStreamPropertiesObject;\n\n  constructor(header: IAsfObjectHeader) {\n    super(header);\n  }\n\n  public get(buf: Buffer, off: number): IExtendedStreamPropertiesObject {\n    return {\n      startTime: Util.readUInt64LE(buf, off),\n      endTime: Util.readUInt64LE(buf, off + 8),\n      dataBitrate: buf.readInt32LE(off + 12),\n      bufferSize: buf.readInt32LE(off + 16),\n      initialBufferFullness: buf.readInt32LE(off + 20),\n      alternateDataBitrate: buf.readInt32LE(off + 24),\n      alternateBufferSize: buf.readInt32LE(off + 28),\n      alternateInitialBufferFullness: buf.readInt32LE(off + 32),\n      maximumObjectSize: buf.readInt32LE(off + 36),\n      flags: { // ToDo, check flag positions\n        reliableFlag: common.strtokBITSET.get(buf, off + 40, 0),\n        seekableFlag: common.strtokBITSET.get(buf, off + 40, 1),\n        resendLiveCleanpointsFlag: common.strtokBITSET.get(buf, off + 40, 2)\n      },\n      // flagsNumeric: Token.UINT32_LE.get(buf, off + 64),\n      streamNumber: buf.readInt16LE(off + 42),\n      streamLanguageId: buf.readInt16LE(off + 44),\n      averageTimePerFrame: buf.readInt32LE(off + 52),\n      streamNameCount: buf.readInt32LE(off + 54),\n      payloadExtensionSystems: buf.readInt32LE(off + 56),\n      streamNames: [], // ToDo\n      streamPropertiesObject: null\n    };\n  }\n}\n\n/**\n * 4.7  Metadata Object (optional, 0 or 1)\n * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/04_objects_in_the_asf_header_extension_object.html#4_7\n */\nexport class MetadataObjectState extends State<ITag[]> {\n\n  public static guid = GUID.MetadataObject;\n\n  constructor(header: IAsfObjectHeader) {\n    super(header);\n  }\n\n  public get(buf: Buffer, off: number): ITag[] {\n    const tags: ITag[] = [];\n    const descriptionRecordsCount = buf.readUInt16LE(off);\n    let pos = off + 2;\n    for (let i = 0; i < descriptionRecordsCount; i += 1) {\n      pos += 4;\n      const nameLen = buf.readUInt16LE(pos);\n      pos += 2;\n      const dataType = buf.readUInt16LE(pos);\n      pos += 2;\n      const dataLen = buf.readUInt32LE(pos);\n      pos += 4;\n      const name = Util.parseUnicodeAttr(buf.slice(pos, pos + nameLen));\n      pos += nameLen;\n      const data = buf.slice(pos, pos + dataLen);\n      pos += dataLen;\n      const parseAttr = Util.getParserForAttr(dataType);\n      if (!parseAttr) {\n        throw new Error('unexpected value headerType: ' + dataType);\n      }\n      if (name === \"WM/Picture\") {\n        tags.push({id: name, value: WmPictureToken.fromBuffer(data)});\n      } else {\n        tags.push({id: name, value: parseAttr(data)});\n      }\n    }\n    return tags;\n  }\n}\n\n// 4.8\tMetadata Library Object (optional, 0 or 1)\nexport class MetadataLibraryObjectState extends MetadataObjectState {\n\n  public static guid = GUID.MetadataLibraryObject;\n\n  constructor(header: IAsfObjectHeader) {\n    super(header);\n  }\n}\n\nexport interface IWmPicture extends IPicture {\n  type: string,\n  format: string,\n  description: string,\n  size: number\n  data: Buffer;\n}\n\n/**\n * Ref: https://msdn.microsoft.com/en-us/library/windows/desktop/dd757977(v=vs.85).aspx\n */\nexport class WmPictureToken implements IGetToken<IWmPicture> {\n\n  public static fromBase64(base64str: string): IPicture {\n    return this.fromBuffer(new Buffer(base64str, 'base64'));\n  }\n\n  public static fromBuffer(buffer: Buffer): IWmPicture {\n    const pic = new WmPictureToken(buffer.length);\n    return pic.get(buffer, 0);\n  }\n\n  constructor(public len) {\n  }\n\n  public get(buffer: Buffer, offset: number): IWmPicture {\n\n    const typeId = buffer.readUInt8(offset++);\n    const size = buffer.readInt32LE(offset);\n    let index = 5;\n\n    while (buffer.readUInt16BE(index) !== 0) {\n      index += 2;\n    }\n    const format = buffer.slice(5, index).toString(\"utf16le\");\n\n    while (buffer.readUInt16BE(index) !== 0) {\n      index += 2;\n    }\n    const description = buffer.slice(5, index).toString(\"utf16le\");\n\n    return {\n      type: AttachedPictureType[typeId],\n      format,\n      description,\n      size,\n      data: buffer.slice(index + 4)\n    };\n  }\n}\n"]}