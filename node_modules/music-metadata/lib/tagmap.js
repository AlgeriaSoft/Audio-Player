"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var AsfTagMap_1 = require("./asf/AsfTagMap");
var ID3v1TagMap_1 = require("./id3v1/ID3v1TagMap");
var ID3v22TagMap_1 = require("./id3v2/ID3v22TagMap");
var ID3v24TagMap_1 = require("./id3v2/ID3v24TagMap");
var MP4TagMap_1 = require("./mp4/MP4TagMap");
var VorbisTagMap_1 = require("./vorbis/VorbisTagMap");
var APEv2TagMap_1 = require("./apev2/APEv2TagMap");
/**
 * tagmap maps native meta tags to generic common types
 */
var TagMap = (function () {
    function TagMap() {
        // Normalize (post-process) common tag mappings
        this.mappings = {
            asf: AsfTagMap_1.AsfTagMap,
            APEv2: TagMap.capitalizeTags(APEv2TagMap_1.APEv2TagMap),
            'id3v1.1': ID3v1TagMap_1.ID3v1TagMap,
            'id3v2.2': ID3v22TagMap_1.ID3v22TagMap,
            'id3v2.3': ID3v24TagMap_1.ID3v24TagMap,
            'id3v2.4': ID3v24TagMap_1.ID3v24TagMap,
            'iTunes MP4': MP4TagMap_1.MP4TagMap,
            vorbis: VorbisTagMap_1.VorbisTagMap
        };
    }
    TagMap.getCommonTag = function (tag) {
        return TagMap.commonTags[tag];
    };
    TagMap.isCommonTag = function (tag) {
        return TagMap.commonTags[tag] !== undefined;
    };
    /**
     * @param alias Name of common tag
     * @returns {boolean|*} true if given alias is mapped as a singleton', otherwise false
     */
    TagMap.isSingleton = function (alias) {
        return TagMap.commonTags.hasOwnProperty(alias) && !TagMap.commonTags[alias].multiple;
    };
    TagMap.capitalizeTags = function (map) {
        var newMap = {};
        for (var tag in map) {
            if (map.hasOwnProperty(tag)) {
                newMap[tag.toUpperCase()] = map[tag];
            }
        }
        return newMap;
    };
    /**
     * Test if native tag headerType is a singleton
     * @param type e.g.: 'iTunes MP4' | 'asf' | 'id3v1.1' | 'id3v2.4' | 'vorbis'
     * @param  tag Native tag name', e.g. 'TITLE'
     * @returns {boolean} true is we can safely assume that it is a  singleton
     */
    TagMap.prototype.isNativeSingleton = function (type, tag) {
        switch (type) {
            case 'format':
                return true;
            case 'id3v2.3':
                switch (tag) {
                    case 'IPLS':
                        return true;
                }
            case 'id3v2.4':
                switch (tag) {
                    case 'TIPL':
                    case 'TMCL':
                        return true;
                }
        }
        var alias = this.getCommonName(type, tag);
        return alias && !TagMap.commonTags[alias].multiple;
    };
    /**
     * @headerType Native header headerType: e.g.: 'm4a' | 'asf' | 'id3v1.1' | 'vorbis'
     * @tag  Native header tag
     * @return common tag name (alias)
     */
    TagMap.prototype.getCommonName = function (type, tag) {
        if (!this.mappings[type]) {
            throw new Error('Illegal header headerType: ' + type);
        }
        return this.mappings[type][type === 'APEv2' ? tag.toUpperCase() : tag];
    };
    TagMap.commonTags = {
        year: { multiple: false },
        track: { multiple: false },
        disk: { multiple: false },
        title: { multiple: false },
        artist: { multiple: false },
        artists: { multiple: true },
        albumartist: { multiple: false },
        album: { multiple: false },
        date: { multiple: false },
        originaldate: { multiple: false },
        originalyear: { multiple: false },
        comment: { multiple: true },
        genre: { multiple: true },
        picture: { multiple: true },
        composer: { multiple: true },
        lyrics: { multiple: true },
        albumsort: { multiple: false },
        titlesort: { multiple: false },
        work: { multiple: false },
        artistsort: { multiple: false },
        albumartistsort: { multiple: false },
        composersort: { multiple: true },
        lyricist: { multiple: true },
        writer: { multiple: true },
        conductor: { multiple: true },
        remixer: { multiple: true },
        arranger: { multiple: true },
        engineer: { multiple: true },
        producer: { multiple: true },
        djmixer: { multiple: true },
        mixer: { multiple: true },
        label: { multiple: false },
        grouping: { multiple: false },
        subtitle: { multiple: false },
        discsubtitle: { multiple: false },
        totaltracks: { multiple: false },
        totaldiscs: { multiple: false },
        compilation: { multiple: false },
        _rating: { multiple: false },
        bpm: { multiple: false },
        mood: { multiple: false },
        media: { multiple: false },
        catalognumber: { multiple: false },
        show: { multiple: false },
        showsort: { multiple: false },
        podcast: { multiple: false },
        podcasturl: { multiple: false },
        releasestatus: { multiple: false },
        releasetype: { multiple: true },
        releasecountry: { multiple: false },
        script: { multiple: false },
        language: { multiple: false },
        copyright: { multiple: false },
        license: { multiple: false },
        encodedby: { multiple: false },
        encodersettings: { multiple: false },
        gapless: { multiple: false },
        barcode: { multiple: false },
        isrc: { multiple: false },
        asin: { multiple: false },
        musicbrainz_recordingid: { multiple: false },
        musicbrainz_trackid: { multiple: false },
        musicbrainz_albumid: { multiple: false },
        musicbrainz_artistid: { multiple: true },
        musicbrainz_albumartistid: { multiple: true },
        musicbrainz_releasegroupid: { multiple: false },
        musicbrainz_workid: { multiple: false },
        musicbrainz_trmid: { multiple: false },
        musicbrainz_discid: { multiple: false },
        acoustid_id: { multiple: false },
        acoustid_fingerprint: { multiple: false },
        musicip_puid: { multiple: false },
        musicip_fingerprint: { multiple: false },
        website: { multiple: false },
        'performer:instrument': { multiple: true },
        averageLevel: { multiple: false },
        peakLevel: { multiple: false },
        notes: { multiple: true },
        key: { multiple: false },
        originalalbum: { multiple: false },
        originalartist: { multiple: false }
    };
    return TagMap;
}());
exports.default = TagMap;
//# sourceMappingURL=tagmap.js.map