{"version":3,"file":"common.js","sourceRoot":"","sources":["../src/common.ts"],"names":[],"mappings":"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","sourcesContent":["import {Windows1292Decoder} from './Windows1292Decoder';\nimport {Genres} from \"./id3v1/ID3v1Parser\";\n\nexport type StringEncoding = 'iso-8859-1' | 'utf16' | 'utf8' | 'utf8'| 'utf16le';\n\nexport default class Common {\n\n  public static strtokUINT24_BE = {\n    get: (buf: Buffer, off: number): number => {\n      return (((buf[off] << 8) + buf[off + 1]) << 8) + buf[off + 2];\n    },\n    len: 3\n  };\n\n  public static strtokBITSET = {\n    get: (buf: Buffer, off: number, bit: number): boolean => {\n      return (buf[off] & (1 << bit)) !== 0;\n    },\n    len: 1\n  };\n\n  public static strtokUINT32_LE = {\n    len: 4,\n    get: (buf: Buffer, off: number) => {\n      // Shifting the MSB by 24 directly causes it to go negative if its\n      // last bit is high, so we instead shift by 23 and multiply by 2.\n      // Also, using binary OR to count the MSB if its last bit is high\n      // causes the value to go negative. Use addition there.\n      return (buf[off] | (buf[off + 1] << 8) | (buf[off + 2] << 16)) +\n        ((buf[off + 3] << 23) * 2);\n    }\n  };\n\n  public static getParserForMediaType(types, header) {\n    for (const type of types) {\n      const offset = type.offset || 0;\n      if (header.length >= offset + type.buf.length && header.slice(offset, offset + type.buf.length).compare(type.buf) === 0) {\n        return type.tag;\n      }\n    }\n    // default to id3v1.1 if we cannot detect any other tags\n    return require('./id3v1/id3v1');\n  }\n\n  public static streamOnRealEnd(stream: NodeJS.ReadableStream, callback: () => void): void {\n    stream.on('end', done);\n    stream.on('close', done);\n    function done() {\n      stream.removeListener('end', done);\n      stream.removeListener('close', done);\n      callback();\n    }\n  }\n\n  public static removeUnsyncBytes(buffer: Buffer): Buffer {\n    let readI = 0;\n    let writeI = 0;\n    while (readI < buffer.length - 1) {\n      if (readI !== writeI) {\n        buffer[writeI] = buffer[readI];\n      }\n      readI += (buffer[readI] === 0xFF && buffer[readI + 1] === 0) ? 2 : 1;\n      writeI++;\n    }\n    if (readI < buffer.length) {\n      buffer[writeI++] = buffer[readI++];\n    }\n    return buffer.slice(0, writeI);\n  }\n\n  /**\n   *\n   * @param buffer\n   * @param start\n   * @param end\n   * @param encoding // ToDo: ts.enum\n   * @return {number}\n   */\n  public static findZero(buffer: Buffer, start: number, end: number, encoding?: string): number {\n    let i = start;\n    if (encoding === 'utf16') {\n      while (buffer[i] !== 0 || buffer[i + 1] !== 0) {\n        if (i >= end) return end;\n        i += 2;\n      }\n      return i;\n    } else {\n      while (buffer[i] !== 0) {\n        if (i >= end) return end;\n        i++;\n      }\n      return i;\n    }\n  }\n\n  public static sum(arr: number[]): number {\n    let s: number = 0;\n    for (const v of arr) {\n      s += v;\n    }\n    return s;\n  }\n\n  public static swapBytes(buffer: Buffer): Buffer {\n    const l = buffer.length;\n    if (l & 0x01) {\n      throw new Error('Buffer length must be even');\n    }\n    for (let i = 0; i < l; i += 2) {\n      const a = buffer[i];\n      buffer[i] = buffer[i + 1];\n      buffer[i + 1] = a;\n    }\n    return buffer;\n  }\n\n  public static readUTF16String(buffer: Buffer): string {\n    let offset = 0;\n    if (buffer[0] === 0xFE && buffer[1] === 0xFF) { // big endian\n      buffer = Common.swapBytes(buffer);\n      offset = 2;\n    } else if (buffer[0] === 0xFF && buffer[1] === 0xFE) { // little endian\n      offset = 2;\n    }\n    return buffer.toString('ucs2', offset);\n  }\n\n  /**\n   *\n   * @param buffer Decoder input data\n   * @param encoding 'utf16le' | 'utf16' | 'utf8' | 'iso-8859-1'\n   * @return {string}\n   */\n  public static decodeString(buffer: Buffer, encoding: StringEncoding): string {\n    // annoying workaround for a double BOM issue\n    // https://github.com/leetreveil/musicmetadata/issues/84\n    if (buffer[0] === 0xFF && buffer[1] === 0xFE && buffer[2] === 0xFE && buffer[3] === 0xFF) {\n      buffer = buffer.slice(2);\n    }\n\n    if (encoding === 'utf16le' || encoding === 'utf16') {\n      return Common.readUTF16String(buffer);\n    } else if (encoding === 'utf8') {\n      return buffer.toString('utf8');\n    } else if (encoding === 'iso-8859-1') {\n      return Windows1292Decoder.decode(buffer);\n    }\n\n    throw Error(encoding + ' encoding is not supported!');\n  }\n\n  public static parseGenre(origVal: string) {\n    // match everything inside parentheses\n    const split = origVal.trim().split(/\\((.*?)\\)/g).filter( (val) => {\n        return val !== '';\n      });\n\n    const array = [];\n    for (let cur of split) {\n      if (/^\\d+$/.test(cur) && !isNaN(parseInt(cur, 10))) {\n        cur = Genres[cur];\n      }\n      array.push(cur);\n    }\n\n    return array\n      .filter( (val) => {\n        return val !== undefined;\n      }).join('/');\n  }\n\n  public static stripNulls(str: string): string {\n    str = str.replace(/^\\x00+/g, '');\n    str = str.replace(/\\x00+$/g, '');\n    return str;\n  }\n\n  /**\n   * Read bit-aligned number start from buffer\n   * Total offset in bits = byteOffset * 8 + bitOffset\n   * @param buf Byte buffer\n   * @param byteOffset Starting offset in bytes\n   * @param bitOffset Starting offset in bits: 0 = lsb\n   * @param len Length of number in bits\n   * @return {number} decoded bit aligned number\n   */\n  public static getBitAllignedNumber(buf: Buffer, byteOffset: number, bitOffset: number, len: number): number {\n    const byteOff = byteOffset + ~~(bitOffset / 8);\n    const bitOff = bitOffset % 8;\n    let value = buf[byteOff];\n    value &= 0xff >> bitOff;\n    const bitsRead = 8 - bitOff;\n    const bitsLeft = len - bitsRead;\n    if (bitsLeft < 0) {\n      value >>= (8 - bitOff - len);\n    } else if (bitsLeft > 0) {\n      value <<= bitsLeft;\n      value |= Common.getBitAllignedNumber(buf, byteOffset, bitOffset + bitsRead, bitsLeft);\n    }\n    return value;\n  }\n\n  /**\n   * Read bit-aligned number start from buffer\n   * Total offset in bits = byteOffset * 8 + bitOffset\n   * @param buf Byte buffer\n   * @param byteOffset Starting offset in bytes\n   * @param bitOffset Starting offset in bits: 0 = most significant bit, 7 is least significant bit\n   * @return {number} decoded bit aligned number\n   */\n  public static isBitSet(buf: Buffer, byteOffset: number, bitOffset: number): boolean {\n    return Common.getBitAllignedNumber(buf, byteOffset, bitOffset, 1) === 1;\n  }\n}\n"]}