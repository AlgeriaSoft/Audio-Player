{"version":3,"file":"FlacParser.js","sourceRoot":"","sources":["../../src/flac/FlacParser.ts"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nimport common from '../common';\nimport {INativeAudioMetadata, IOptions, ITag, IFormat} from \"../index\";\nimport {ITokenParser} from \"../ParserFactory\";\nimport {ITokenizer, IgnoreType} from \"strtok3\";\nimport {BufferType, IGetToken} from \"token-types\";\nimport * as Token from \"token-types\";\nimport {IVorbisPicture, VorbisPictureToken} from \"../vorbis/Vorbis\";\n\n/**\n * FLAC supports up to 128 kinds of metadata blocks; currently the following are defined:\n * ref: https://xiph.org/flac/format.html#metadata_block\n */\nenum BlockType {\n  STREAMINFO = 0,\n  PADDING = 1,\n  APPLICATION = 2,\n  SEEKTABLE = 3,\n  VORBIS_COMMENT = 4,\n  CUESHEET = 5,\n  PICTURE = 6\n}\n\nexport class FlacParser implements ITokenParser {\n\n  public static getInstance(): FlacParser {\n    return new FlacParser();\n  }\n\n  private tokenizer: ITokenizer;\n  private options: IOptions;\n\n  private format: IFormat;\n  private tags: ITag[] = [];\n  private padding: number = 0;\n  private warnings: string[] = []; // ToDo: should be part of the parsing result\n\n  public parse(tokenizer: ITokenizer, options: IOptions): Promise<INativeAudioMetadata> {\n\n    this.tokenizer = tokenizer;\n    this.options = options;\n\n    return tokenizer.readToken<Buffer>(new BufferType(4)).then((buf) => {\n      if (buf.toString() !== 'fLaC') {\n        throw new Error('expected flac header but was not found');\n      }\n      return this.parseBlockHeader();\n    });\n  }\n\n  private parseBlockHeader(): Promise<INativeAudioMetadata> {\n    // Read block header\n    return this.tokenizer.readToken<IBlockHeader>(Metadata.BlockHeader).then((blockHeader) => {\n      // Parse block data\n      return this.parseDataBlock(blockHeader).then(() => {\n        if (blockHeader.lastBlock) {\n          // done\n          return {\n            format: this.format,\n            native: {\n              vorbis: this.tags\n            }\n          };\n        } else {\n          return this.parseBlockHeader();\n        }\n      });\n    });\n  }\n\n  private parseDataBlock(blockHeader: IBlockHeader): Promise<void> {\n    switch (blockHeader.type) {\n      case BlockType.STREAMINFO:\n        return this.parseBlockStreamInfo(blockHeader.length);\n      case BlockType.PADDING:\n        this.padding += blockHeader.length;\n        break;\n      case BlockType.APPLICATION:\n        break;\n      case BlockType.SEEKTABLE:\n        break;\n      case BlockType.VORBIS_COMMENT:\n        return this.parseComment(blockHeader.length);\n      case BlockType.CUESHEET:\n        break;\n      case BlockType.PICTURE:\n        return this.parsePicture(blockHeader.length);\n      default:\n        this.warnings.push(\"Unknown block type: \" + blockHeader.type);\n    }\n    // Ignore data block\n    return this.tokenizer.readToken<void>(new IgnoreType(blockHeader.length));\n  }\n\n  /**\n   * Parse STREAMINFO\n   */\n  private parseBlockStreamInfo(dataLen: number): Promise<void> {\n\n    if (dataLen !== Metadata.BlockStreamInfo.len)\n      throw new Error(\"Unexpected block-stream-info length\");\n\n    return this.tokenizer.readToken<IBlockStreamInfo>(Metadata.BlockStreamInfo).then((streamInfo) => {\n      this.format = {\n        dataformat: 'flac',\n        lossless: true,\n        headerType: 'vorbis',\n        numberOfChannels: streamInfo.channels,\n        bitsPerSample: streamInfo.bitsPerSample,\n        sampleRate: streamInfo.sampleRate,\n        duration: streamInfo.totalSamples / streamInfo.sampleRate\n      };\n      // callback('format', 'bitrate', fileSize / duration) // ToDo: exclude meta-data\n    });\n  }\n\n  /**\n   * Parse VORBIS_COMMENT\n   * Ref: https://www.xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-640004.2.3\n   */\n  private parseComment(dataLen: number): Promise<void> {\n    return this.tokenizer.readToken<Buffer>(new BufferType(dataLen)).then((data) => {\n      const decoder = new DataDecoder(data);\n      decoder.readStringUtf8(); // vendor (skip)\n      const commentListLength = decoder.readInt32();\n      for (let i = 0; i < commentListLength; i++) {\n        const comment = decoder.readStringUtf8();\n        const split = comment.split('=');\n        this.tags.push({id: split[0].toUpperCase(), value: split[1]});\n      }\n    });\n  }\n\n  private parsePicture(dataLen: number) {\n    if (this.options.skipCovers) {\n      return this.tokenizer.ignore(dataLen);\n    } else {\n      return this.tokenizer.readToken<IVorbisPicture>(new VorbisPictureToken(dataLen)).then((picture) => {\n        this.tags.push({id: 'METADATA_BLOCK_PICTURE', value: picture});\n      });\n    }\n  }\n}\n\n/**\n * METADATA_BLOCK_DATA\n * Ref: https://xiph.org/flac/format.html#metadata_block_streaminfo\n */\ninterface IBlockHeader {\n  // Last-metadata-block flag: '1' if this block is the last metadata block before the audio blocks, '0' otherwise.\n  lastBlock: boolean,\n  // BLOCK_TYPE\n  type: BlockType,\n  // Length (in bytes) of metadata to follow (does not include the size of the METADATA_BLOCK_HEADER)\n  length: number;\n}\n\n/**\n * METADATA_BLOCK_DATA\n * Ref: https://xiph.org/flac/format.html#metadata_block_streaminfo\n */\ninterface IBlockStreamInfo {\n  minimumBlockSize: number,\n  // The maximum block size (in samples) used in the stream.\n  // (Minimum blocksize == maximum blocksize) implies a fixed-blocksize stream.\n  maximumBlockSize: number,\n  // The minimum frame size (in bytes) used in the stream.\n  // May be 0 to imply the value is not known.\n  minimumFrameSize: number,\n  // The maximum frame size (in bytes) used in the stream.\n  // May be 0 to imply the value is not known.\n  maximumFrameSize: number,\n  // Sample rate in Hz. Though 20 bits are available,\n  // the maximum sample rate is limited by the structure of frame headers to 655350Hz.\n  // Also, a value of 0 is invalid.\n  sampleRate: number,\n  // probably slower: sampleRate: common.getBitAllignedNumber(buf, off + 10, 0, 20),\n  // (number of channels)-1. FLAC supports from 1 to 8 channels\n  channels: number,\n  // bits per sample)-1.\n  // FLAC supports from 4 to 32 bits per sample. Currently the reference encoder and decoders only support up to 24 bits per sample.\n  bitsPerSample: number,\n  // Total samples in stream.\n  // 'Samples' means inter-channel sample, i.e. one second of 44.1Khz audio will have 44100 samples regardless of the number of channels.\n  // A value of zero here means the number of total samples is unknown.\n  totalSamples: number,\n  // the MD5 hash of the file (see notes for usage... it's a littly tricky)\n  fileMD5: Buffer;\n}\n\nclass Metadata {\n\n  public static BlockHeader: IGetToken<IBlockHeader> = {\n    len: 4,\n\n    get: (buf: Buffer, off: number): IBlockHeader => {\n      return {\n        lastBlock: common.strtokBITSET.get(buf, off, 7),\n        type: common.getBitAllignedNumber(buf, off, 1, 7),\n        length: common.strtokUINT24_BE.get(buf, off + 1)\n      };\n    }\n  };\n\n  /**\n   * METADATA_BLOCK_DATA\n   * Ref: https://xiph.org/flac/format.html#metadata_block_streaminfo\n   */\n  public static BlockStreamInfo: IGetToken<IBlockStreamInfo> = {\n    len: 34,\n\n    get: (buf: Buffer, off: number): IBlockStreamInfo => {\n      return {\n        // The minimum block size (in samples) used in the stream.\n        minimumBlockSize: Token.UINT16_BE.get(buf, off),\n        // The maximum block size (in samples) used in the stream.\n        // (Minimum blocksize == maximum blocksize) implies a fixed-blocksize stream.\n        maximumBlockSize: Token.UINT16_BE.get(buf, off + 2) / 1000,\n        // The minimum frame size (in bytes) used in the stream.\n        // May be 0 to imply the value is not known.\n        minimumFrameSize: Token.UINT24_BE.get(buf, off + 4),\n        // The maximum frame size (in bytes) used in the stream.\n        // May be 0 to imply the value is not known.\n        maximumFrameSize: Token.UINT24_BE.get(buf, off + 7),\n        // Sample rate in Hz. Though 20 bits are available,\n        // the maximum sample rate is limited by the structure of frame headers to 655350Hz.\n        // Also, a value of 0 is invalid.\n        sampleRate: common.strtokUINT24_BE.get(buf, off + 10) >> 4,\n        // probably slower: sampleRate: common.getBitAllignedNumber(buf, off + 10, 0, 20),\n        // (number of channels)-1. FLAC supports from 1 to 8 channels\n        channels: common.getBitAllignedNumber(buf, off + 12, 4, 3) + 1,\n        // bits per sample)-1.\n        // FLAC supports from 4 to 32 bits per sample. Currently the reference encoder and decoders only support up to 24 bits per sample.\n        bitsPerSample: common.getBitAllignedNumber(buf, off + 12, 7, 5) + 1,\n        // Total samples in stream.\n        // 'Samples' means inter-channel sample, i.e. one second of 44.1Khz audio will have 44100 samples regardless of the number of channels.\n        // A value of zero here means the number of total samples is unknown.\n        totalSamples: common.getBitAllignedNumber(buf, off + 13, 4, 36),\n        // the MD5 hash of the file (see notes for usage... it's a littly tricky)\n        fileMD5: new BufferType(16).get(buf, off + 18)\n      };\n    }\n  };\n}\n\nclass DataDecoder {\n\n  private data: Buffer;\n  private offset: number;\n\n  constructor(data: Buffer) {\n    this.data = data;\n    this.offset = 0;\n  }\n\n  public readInt32(): number {\n    const value = Token.UINT32_LE.get(this.data, this.offset);\n    this.offset += 4;\n    return value;\n  }\n\n  public readStringUtf8(): string {\n    const len = this.readInt32();\n    const value = this.data.toString('utf8', this.offset, this.offset + len);\n    this.offset += len;\n    return value;\n  }\n}\n"]}