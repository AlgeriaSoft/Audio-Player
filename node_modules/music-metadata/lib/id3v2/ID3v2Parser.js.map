{"version":3,"file":"ID3v2Parser.js","sourceRoot":"","sources":["../../src/id3v2/ID3v2Parser.ts"],"names":[],"mappings":"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","sourcesContent":["import ReadableStream = NodeJS.ReadableStream;\nimport {isArray} from 'util';\nimport common from '../common';\nimport {HeaderType} from '../tagmap';\nimport {ITokenParser} from \"../ParserFactory\";\nimport {ITokenizer} from \"strtok3\";\nimport {INativeAudioMetadata, ITag} from \"../\";\nimport {IGetToken, StringType} from \"token-types\";\nimport * as Token from \"token-types\";\nimport {IOptions} from \"../\";\nimport {MpegParser} from \"../mpeg/MpegParser\";\nimport FrameParser from \"./FrameParser\";\n\ninterface IFrameFlags {\n  status: {\n    tag_alter_preservation: boolean,\n    file_alter_preservation: boolean,\n    read_only: boolean\n  },\n  format: {\n    grouping_identity: boolean,\n    compression: boolean,\n    encryption: boolean,\n    unsynchronisation: boolean,\n    data_length_indicator: boolean\n  };\n}\ninterface IFrameHeader {\n  id: string,\n  length?: number;\n  flags?: IFrameFlags;\n}\n\n/**\n * ID3v2 tag header\n */\ninterface IID3v2header {\n// ID3v2/file identifier   \"ID3\"\n  fileIdentifier: string,\n  // ID3v2 versionIndex\n  version: {\n    major: number,\n    revision: number\n  },\n  // ID3v2 flags\n  flags: {\n    // Raw flags value\n    raw: number,\n    // Unsynchronisation\n    unsynchronisation: boolean,\n    // Extended header\n    isExtendedHeader: boolean\n    // Experimental indicator\n    expIndicator: boolean,\n    footer: boolean\n  };\n  size: number;\n}\n\ninterface IExtendedHeader {\n  // Extended header size\n  size: number;\n  extendedFlags: number;\n  // Size of padding\n  sizeOfPadding: number;\n  // CRC data present\n  crcDataPresent: boolean;\n}\n\n/**\n * The picture type according to the ID3v2 APIC frame\n * Ref: http://id3.org/id3v2.3.0#Attached_picture\n */\nexport enum AttachedPictureType {\n  'Other',\n  \"32x32 pixels 'file icon' (PNG only)\",\n  'Other file icon',\n  'Cover (front)',\n  'Cover (back)',\n  'Leaflet page',\n  'Media (e.g. label side of CD)',\n  'Lead artist/lead performer/soloist',\n  'Artist/performer',\n  'Conductor',\n  'Band/Orchestra',\n  'Composer',\n  'Lyricist/text writer',\n  'Recording Location',\n  'During recording',\n  'During performance',\n  'Movie/video screen capture',\n  'A bright coloured fish',\n  'Illustration',\n  'Band/artist logotype',\n  'Publisher/Studio logotype'\n}\n\nclass ID3v2 {\n\n  /**\n   * 28 bits (representing up to 256MB) integer, the msb is 0 to avoid 'false syncsignals'.\n   * 4 * %0xxxxxxx\n   */\n  public static UINT32SYNCSAFE = {\n    get: (buf: Buffer, off: number): number => {\n      return buf[off + 3] & 0x7f | ((buf[off + 2]) << 7) |\n        ((buf[off + 1]) << 14) | ((buf[off]) << 21);\n    },\n    len: 4\n  };\n\n  /**\n   * ID3v2 header\n   * Ref: http://id3.org/id3v2.3.0#ID3v2_header\n   * ToDo\n   */\n  public static Header: IGetToken<IID3v2header> = {\n    len: 10,\n\n    get: (buf, off): IID3v2header => {\n      return {\n        // ID3v2/file identifier   \"ID3\"\n        fileIdentifier: new StringType(3, 'ascii').get(buf, off),\n        // ID3v2 versionIndex\n        version: {\n          major: Token.INT8.get(buf, off + 3),\n          revision: Token.INT8.get(buf, off + 4)\n        },\n        // ID3v2 flags\n        flags: {\n          // Raw flags value\n          raw: Token.INT8.get(buf, off + 4),\n          // Unsynchronisation\n          unsynchronisation: common.strtokBITSET.get(buf, off + 5, 7),\n          // Extended header\n          isExtendedHeader: common.strtokBITSET.get(buf, off + 5, 6),\n          // Experimental indicator\n          expIndicator: common.strtokBITSET.get(buf, off + 5, 5),\n          footer: common.strtokBITSET.get(buf, off + 5, 4)\n        },\n        size: ID3v2.UINT32SYNCSAFE.get(buf, off + 6)\n      };\n    }\n  };\n\n  public static ExtendedHeader: IGetToken<IExtendedHeader> = {\n    len: 10,\n\n    get: (buf, off): IExtendedHeader => {\n      return {\n        // Extended header size\n        size: Token.UINT32_BE.get(buf, off),\n        // Extended Flags\n        extendedFlags: Token.UINT16_BE.get(buf, off + 4),\n        // Size of padding\n        sizeOfPadding: Token.UINT32_BE.get(buf, off + 6),\n        // CRC data present\n        crcDataPresent: common.strtokBITSET.get(buf, off + 4, 31)\n      };\n    }\n  };\n}\n\nexport class ID3v2Parser implements ITokenParser {\n\n  public static getInstance(): ID3v2Parser {\n    return new ID3v2Parser();\n  }\n\n  private static readFrameHeader(v, majorVer): IFrameHeader {\n    let header: IFrameHeader;\n    switch (majorVer) {\n\n      case 2:\n        header = {\n          id: v.toString('ascii', 0, 3),\n          length: common.strtokUINT24_BE.get(v, 3)\n        };\n        break;\n\n      case 3:\n        header = {\n          id: v.toString('ascii', 0, 4),\n          length: Token.UINT32_BE.get(v, 4),\n          flags: ID3v2Parser.readFrameFlags(v.slice(8, 10))\n        };\n        break;\n\n      case 4:\n        header = {\n          id: v.toString('ascii', 0, 4),\n          length: ID3v2.UINT32SYNCSAFE.get(v, 4),\n          flags: ID3v2Parser.readFrameFlags(v.slice(8, 10))\n        };\n        break;\n\n      default:\n        throw new Error('Unexpected majorVer: ' + majorVer);\n    }\n    return header;\n  }\n\n  private static getFrameHeaderLength(majorVer: number): number {\n    switch (majorVer) {\n      case 2:\n        return 6;\n      case 3:\n      case 4:\n        return 10;\n      default:\n        throw new Error('header versionIndex is incorrect');\n    }\n  }\n\n  private static readFrameFlags(b: Buffer): IFrameFlags {\n    return {\n      status: {\n        tag_alter_preservation: common.strtokBITSET.get(b, 0, 6),\n        file_alter_preservation: common.strtokBITSET.get(b, 0, 5),\n        read_only: common.strtokBITSET.get(b, 0, 4)\n      },\n      format: {\n        grouping_identity: common.strtokBITSET.get(b, 1, 7),\n        compression: common.strtokBITSET.get(b, 1, 3),\n        encryption: common.strtokBITSET.get(b, 1, 2),\n        unsynchronisation: common.strtokBITSET.get(b, 1, 1),\n        data_length_indicator: common.strtokBITSET.get(b, 1, 0)\n      }\n    };\n  }\n\n  private static readFrameData(buf: Buffer, frameHeader: IFrameHeader, majorVer: number, includeCovers: boolean) {\n    switch (majorVer) {\n      case 2:\n        return FrameParser.readData(buf, frameHeader.id, majorVer, includeCovers);\n      case 3:\n      case 4:\n        if (frameHeader.flags.format.unsynchronisation) {\n          buf = common.removeUnsyncBytes(buf);\n        }\n        if (frameHeader.flags.format.data_length_indicator) {\n          buf = buf.slice(4, buf.length);\n        }\n        return FrameParser.readData(buf, frameHeader.id, majorVer, includeCovers);\n      default:\n        throw new Error('Unexpected majorVer: ' + majorVer);\n    }\n  }\n\n  private tokenizer: ITokenizer;\n  private id3Header: IID3v2header;\n\n  private tags: Array<{ id: string, value: any }> = [];\n  private headerType: HeaderType;\n  private options: IOptions;\n\n  public parse(tokenizer: ITokenizer, options: IOptions): Promise<INativeAudioMetadata> {\n\n    this.tokenizer = tokenizer;\n    this.options = options;\n\n    return this.tokenizer.readToken(ID3v2.Header).then((id3Header) => {\n\n      if (id3Header.fileIdentifier !== 'ID3') {\n        throw new Error(\"expected file identifier 'ID3' not found\");\n      }\n\n      this.id3Header = id3Header;\n\n      this.headerType = ('id3v2.' + id3Header.version.major) as HeaderType;\n\n      if (id3Header.flags.isExtendedHeader) {\n        return this.parseExtendedHeader();\n      } else {\n        return this.parseId3Data(id3Header.size);\n      }\n    });\n  }\n\n  public parseExtendedHeader(): Promise<INativeAudioMetadata> {\n    return this.tokenizer.readToken(ID3v2.ExtendedHeader).then((extendedHeader) => {\n      const dataRemaining = extendedHeader.size - ID3v2.ExtendedHeader.len;\n      if (dataRemaining > 0) {\n        return this.parseExtendedHeaderData(dataRemaining, extendedHeader.size);\n      } else {\n        return this.parseId3Data(this.id3Header.size - extendedHeader.size);\n      }\n    });\n  }\n\n  public parseExtendedHeaderData(dataRemaining: number, extendedHeaderSize: number): Promise<INativeAudioMetadata> {\n    const buffer = new Buffer(dataRemaining);\n    return this.tokenizer.readBuffer(buffer, 0, dataRemaining).then(() => {\n      return this.parseId3Data(this.id3Header.size - extendedHeaderSize);\n    });\n  }\n\n  public parseId3Data(dataLen: number): Promise<INativeAudioMetadata> {\n    const buffer = new Buffer(dataLen);\n    return this.tokenizer.readBuffer(buffer, 0, dataLen).then(() => {\n      for (const tag of this.parseMetadata(buffer)) {\n        if (tag.id === 'TXXX') {\n          for (const text of tag.value.text) {\n            this.tags.push({id: tag.id + ':' + tag.value.description, value: text});\n          }\n        } else if (isArray(tag.value)) {\n          for (const value of tag.value) {\n            this.tags.push({id: tag.id, value});\n          }\n        } else {\n          this.tags.push({id: tag.id, value: tag.value});\n        }\n      }\n\n      return new MpegParser(this.tokenizer, this.id3Header.size, this.options && this.options.duration).parse().then((format) => {\n\n        const res: INativeAudioMetadata = {\n          format,\n          native: {}\n        };\n\n        res.format.headerType = this.headerType;\n        res.native[this.headerType] = this.tags;\n\n        return res;\n      });\n    });\n  }\n\n  private parseMetadata(data: Buffer): ITag[] {\n    let offset = 0;\n    const tags: Array<{ id: string, value: any }> = [];\n\n    while (true) {\n      if (offset === data.length) break;\n      const frameHeaderBytes = data.slice(offset, offset += ID3v2Parser.getFrameHeaderLength(this.id3Header.version.major));\n      const frameHeader = ID3v2Parser.readFrameHeader(frameHeaderBytes, this.id3Header.version.major);\n\n      // Last frame. Check first char is a letter, bit of defensive programming\n      if (frameHeader.id === '' || frameHeader.id === '\\u0000\\u0000\\u0000\\u0000' ||\n        'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.indexOf(frameHeader.id[0]) === -1) {\n        // ToDo: generate warning\n        break;\n      }\n\n      const frameDataBytes = data.slice(offset, offset += frameHeader.length);\n      const values = ID3v2Parser.readFrameData(frameDataBytes, frameHeader, this.id3Header.version.major, !this.options.skipCovers);\n      tags.push({id: frameHeader.id, value: values});\n    }\n    return tags;\n  }\n\n}\n"]}