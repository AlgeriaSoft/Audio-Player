"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("util");
var common_1 = require("../common");
var token_types_1 = require("token-types");
var Token = require("token-types");
var MpegParser_1 = require("../mpeg/MpegParser");
var FrameParser_1 = require("./FrameParser");
/**
 * The picture type according to the ID3v2 APIC frame
 * Ref: http://id3.org/id3v2.3.0#Attached_picture
 */
var AttachedPictureType;
(function (AttachedPictureType) {
    AttachedPictureType[AttachedPictureType["Other"] = 0] = "Other";
    AttachedPictureType[AttachedPictureType["32x32 pixels 'file icon' (PNG only)"] = 1] = "32x32 pixels 'file icon' (PNG only)";
    AttachedPictureType[AttachedPictureType["Other file icon"] = 2] = "Other file icon";
    AttachedPictureType[AttachedPictureType["Cover (front)"] = 3] = "Cover (front)";
    AttachedPictureType[AttachedPictureType["Cover (back)"] = 4] = "Cover (back)";
    AttachedPictureType[AttachedPictureType["Leaflet page"] = 5] = "Leaflet page";
    AttachedPictureType[AttachedPictureType["Media (e.g. label side of CD)"] = 6] = "Media (e.g. label side of CD)";
    AttachedPictureType[AttachedPictureType["Lead artist/lead performer/soloist"] = 7] = "Lead artist/lead performer/soloist";
    AttachedPictureType[AttachedPictureType["Artist/performer"] = 8] = "Artist/performer";
    AttachedPictureType[AttachedPictureType["Conductor"] = 9] = "Conductor";
    AttachedPictureType[AttachedPictureType["Band/Orchestra"] = 10] = "Band/Orchestra";
    AttachedPictureType[AttachedPictureType["Composer"] = 11] = "Composer";
    AttachedPictureType[AttachedPictureType["Lyricist/text writer"] = 12] = "Lyricist/text writer";
    AttachedPictureType[AttachedPictureType["Recording Location"] = 13] = "Recording Location";
    AttachedPictureType[AttachedPictureType["During recording"] = 14] = "During recording";
    AttachedPictureType[AttachedPictureType["During performance"] = 15] = "During performance";
    AttachedPictureType[AttachedPictureType["Movie/video screen capture"] = 16] = "Movie/video screen capture";
    AttachedPictureType[AttachedPictureType["A bright coloured fish"] = 17] = "A bright coloured fish";
    AttachedPictureType[AttachedPictureType["Illustration"] = 18] = "Illustration";
    AttachedPictureType[AttachedPictureType["Band/artist logotype"] = 19] = "Band/artist logotype";
    AttachedPictureType[AttachedPictureType["Publisher/Studio logotype"] = 20] = "Publisher/Studio logotype";
})(AttachedPictureType = exports.AttachedPictureType || (exports.AttachedPictureType = {}));
var ID3v2 = (function () {
    function ID3v2() {
    }
    /**
     * 28 bits (representing up to 256MB) integer, the msb is 0 to avoid 'false syncsignals'.
     * 4 * %0xxxxxxx
     */
    ID3v2.UINT32SYNCSAFE = {
        get: function (buf, off) {
            return buf[off + 3] & 0x7f | ((buf[off + 2]) << 7) |
                ((buf[off + 1]) << 14) | ((buf[off]) << 21);
        },
        len: 4
    };
    /**
     * ID3v2 header
     * Ref: http://id3.org/id3v2.3.0#ID3v2_header
     * ToDo
     */
    ID3v2.Header = {
        len: 10,
        get: function (buf, off) {
            return {
                // ID3v2/file identifier   "ID3"
                fileIdentifier: new token_types_1.StringType(3, 'ascii').get(buf, off),
                // ID3v2 versionIndex
                version: {
                    major: Token.INT8.get(buf, off + 3),
                    revision: Token.INT8.get(buf, off + 4)
                },
                // ID3v2 flags
                flags: {
                    // Raw flags value
                    raw: Token.INT8.get(buf, off + 4),
                    // Unsynchronisation
                    unsynchronisation: common_1.default.strtokBITSET.get(buf, off + 5, 7),
                    // Extended header
                    isExtendedHeader: common_1.default.strtokBITSET.get(buf, off + 5, 6),
                    // Experimental indicator
                    expIndicator: common_1.default.strtokBITSET.get(buf, off + 5, 5),
                    footer: common_1.default.strtokBITSET.get(buf, off + 5, 4)
                },
                size: ID3v2.UINT32SYNCSAFE.get(buf, off + 6)
            };
        }
    };
    ID3v2.ExtendedHeader = {
        len: 10,
        get: function (buf, off) {
            return {
                // Extended header size
                size: Token.UINT32_BE.get(buf, off),
                // Extended Flags
                extendedFlags: Token.UINT16_BE.get(buf, off + 4),
                // Size of padding
                sizeOfPadding: Token.UINT32_BE.get(buf, off + 6),
                // CRC data present
                crcDataPresent: common_1.default.strtokBITSET.get(buf, off + 4, 31)
            };
        }
    };
    return ID3v2;
}());
var ID3v2Parser = (function () {
    function ID3v2Parser() {
        this.tags = [];
    }
    ID3v2Parser.getInstance = function () {
        return new ID3v2Parser();
    };
    ID3v2Parser.readFrameHeader = function (v, majorVer) {
        var header;
        switch (majorVer) {
            case 2:
                header = {
                    id: v.toString('ascii', 0, 3),
                    length: common_1.default.strtokUINT24_BE.get(v, 3)
                };
                break;
            case 3:
                header = {
                    id: v.toString('ascii', 0, 4),
                    length: Token.UINT32_BE.get(v, 4),
                    flags: ID3v2Parser.readFrameFlags(v.slice(8, 10))
                };
                break;
            case 4:
                header = {
                    id: v.toString('ascii', 0, 4),
                    length: ID3v2.UINT32SYNCSAFE.get(v, 4),
                    flags: ID3v2Parser.readFrameFlags(v.slice(8, 10))
                };
                break;
            default:
                throw new Error('Unexpected majorVer: ' + majorVer);
        }
        return header;
    };
    ID3v2Parser.getFrameHeaderLength = function (majorVer) {
        switch (majorVer) {
            case 2:
                return 6;
            case 3:
            case 4:
                return 10;
            default:
                throw new Error('header versionIndex is incorrect');
        }
    };
    ID3v2Parser.readFrameFlags = function (b) {
        return {
            status: {
                tag_alter_preservation: common_1.default.strtokBITSET.get(b, 0, 6),
                file_alter_preservation: common_1.default.strtokBITSET.get(b, 0, 5),
                read_only: common_1.default.strtokBITSET.get(b, 0, 4)
            },
            format: {
                grouping_identity: common_1.default.strtokBITSET.get(b, 1, 7),
                compression: common_1.default.strtokBITSET.get(b, 1, 3),
                encryption: common_1.default.strtokBITSET.get(b, 1, 2),
                unsynchronisation: common_1.default.strtokBITSET.get(b, 1, 1),
                data_length_indicator: common_1.default.strtokBITSET.get(b, 1, 0)
            }
        };
    };
    ID3v2Parser.readFrameData = function (buf, frameHeader, majorVer, includeCovers) {
        switch (majorVer) {
            case 2:
                return FrameParser_1.default.readData(buf, frameHeader.id, majorVer, includeCovers);
            case 3:
            case 4:
                if (frameHeader.flags.format.unsynchronisation) {
                    buf = common_1.default.removeUnsyncBytes(buf);
                }
                if (frameHeader.flags.format.data_length_indicator) {
                    buf = buf.slice(4, buf.length);
                }
                return FrameParser_1.default.readData(buf, frameHeader.id, majorVer, includeCovers);
            default:
                throw new Error('Unexpected majorVer: ' + majorVer);
        }
    };
    ID3v2Parser.prototype.parse = function (tokenizer, options) {
        var _this = this;
        this.tokenizer = tokenizer;
        this.options = options;
        return this.tokenizer.readToken(ID3v2.Header).then(function (id3Header) {
            if (id3Header.fileIdentifier !== 'ID3') {
                throw new Error("expected file identifier 'ID3' not found");
            }
            _this.id3Header = id3Header;
            _this.headerType = ('id3v2.' + id3Header.version.major);
            if (id3Header.flags.isExtendedHeader) {
                return _this.parseExtendedHeader();
            }
            else {
                return _this.parseId3Data(id3Header.size);
            }
        });
    };
    ID3v2Parser.prototype.parseExtendedHeader = function () {
        var _this = this;
        return this.tokenizer.readToken(ID3v2.ExtendedHeader).then(function (extendedHeader) {
            var dataRemaining = extendedHeader.size - ID3v2.ExtendedHeader.len;
            if (dataRemaining > 0) {
                return _this.parseExtendedHeaderData(dataRemaining, extendedHeader.size);
            }
            else {
                return _this.parseId3Data(_this.id3Header.size - extendedHeader.size);
            }
        });
    };
    ID3v2Parser.prototype.parseExtendedHeaderData = function (dataRemaining, extendedHeaderSize) {
        var _this = this;
        var buffer = new Buffer(dataRemaining);
        return this.tokenizer.readBuffer(buffer, 0, dataRemaining).then(function () {
            return _this.parseId3Data(_this.id3Header.size - extendedHeaderSize);
        });
    };
    ID3v2Parser.prototype.parseId3Data = function (dataLen) {
        var _this = this;
        var buffer = new Buffer(dataLen);
        return this.tokenizer.readBuffer(buffer, 0, dataLen).then(function () {
            for (var _i = 0, _a = _this.parseMetadata(buffer); _i < _a.length; _i++) {
                var tag = _a[_i];
                if (tag.id === 'TXXX') {
                    for (var _b = 0, _c = tag.value.text; _b < _c.length; _b++) {
                        var text = _c[_b];
                        _this.tags.push({ id: tag.id + ':' + tag.value.description, value: text });
                    }
                }
                else if (util_1.isArray(tag.value)) {
                    for (var _d = 0, _e = tag.value; _d < _e.length; _d++) {
                        var value = _e[_d];
                        _this.tags.push({ id: tag.id, value: value });
                    }
                }
                else {
                    _this.tags.push({ id: tag.id, value: tag.value });
                }
            }
            return new MpegParser_1.MpegParser(_this.tokenizer, _this.id3Header.size, _this.options && _this.options.duration).parse().then(function (format) {
                var res = {
                    format: format,
                    native: {}
                };
                res.format.headerType = _this.headerType;
                res.native[_this.headerType] = _this.tags;
                return res;
            });
        });
    };
    ID3v2Parser.prototype.parseMetadata = function (data) {
        var offset = 0;
        var tags = [];
        while (true) {
            if (offset === data.length)
                break;
            var frameHeaderBytes = data.slice(offset, offset += ID3v2Parser.getFrameHeaderLength(this.id3Header.version.major));
            var frameHeader = ID3v2Parser.readFrameHeader(frameHeaderBytes, this.id3Header.version.major);
            // Last frame. Check first char is a letter, bit of defensive programming
            if (frameHeader.id === '' || frameHeader.id === '\u0000\u0000\u0000\u0000' ||
                'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.indexOf(frameHeader.id[0]) === -1) {
                // ToDo: generate warning
                break;
            }
            var frameDataBytes = data.slice(offset, offset += frameHeader.length);
            var values = ID3v2Parser.readFrameData(frameDataBytes, frameHeader, this.id3Header.version.major, !this.options.skipCovers);
            tags.push({ id: frameHeader.id, value: values });
        }
        return tags;
    };
    return ID3v2Parser;
}());
exports.ID3v2Parser = ID3v2Parser;
//# sourceMappingURL=ID3v2Parser.js.map