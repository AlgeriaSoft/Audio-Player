"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
exports.__esModule = true;
// Utilies for testing
var stream_1 = require("stream");
/**
 * A mock stream implementation that breaks up provided data into
 * random-sized chunks and emits 'data' events. This is used to simulate
 * data arriving with arbitrary packet boundaries.
 */
var SourceStream = (function (_super) {
    __extends(SourceStream, _super);
    function SourceStream(str, min, max) {
        if (str === void 0) { str = ''; }
        if (min === void 0) { min = 1; }
        if (max === void 0) { max = str.length; }
        var _this = _super.call(this) || this;
        _this.str = str;
        _this.min = min;
        _this.max = max;
        _this.buf = new Buffer(str, 'binary');
        return _this;
    }
    SourceStream.prototype._read = function () {
        /* ToDo: segment data
        const len = Math.min(
          this.min + Math.floor(Math.random() * (this.max - this.min)),
          this.buf.length
        );
    
        const b = this.buf.slice(0, len);
    
        if (len < this.buf.length) {
          this.buf = this.buf.slice(len, this.buf.length);
          this.push(b);
        } else {
          this.push(null); // push the EOF-signaling `null` chunk
        }*/
        this.push(this.buf);
        this.push(null); // push the EOF-signaling `null` chunk
    };
    return SourceStream;
}(stream_1.Readable));
exports.SourceStream = SourceStream;
