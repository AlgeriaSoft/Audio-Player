{"version":3,"file":"util.js","sourceRoot":"","sources":["util.ts"],"names":[],"mappings":"AAAA,sBAAsB;;;;;;;AAEtB,IAAM,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AACjC,uBAAuB,QAAQ,CAAC,CAAA;AAEhC;;;;GAIG;AACH;IAAkC,gCAAQ;IAIxC,sBAAoB,GAAgB,EAAU,GAAe,EAAU,GAAwB;QAAnF,mBAAwB,GAAxB,QAAwB;QAAE,mBAAuB,GAAvB,OAAuB;QAAE,mBAAgC,GAAhC,MAAsB,GAAG,CAAC,MAAM;QAC7F,iBAAO,CAAC;QADU,QAAG,GAAH,GAAG,CAAa;QAAU,QAAG,GAAH,GAAG,CAAY;QAAU,QAAG,GAAH,GAAG,CAAqB;QAG7F,IAAI,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;IACvC,CAAC;IAEM,4BAAK,GAAZ;QAEE;;;;;;;;;;;;;WAaG;QAEH,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACpB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,sCAAsC;IACzD,CAAC;IACH,mBAAC;AAAD,CAAC,AA9BD,CAAkC,iBAAQ,GA8BzC;AA9BY,oBAAY,eA8BxB,CAAA","sourcesContent":["// Utilies for testing\n\nconst assert = require('assert');\nimport {Readable} from \"stream\";\n\n/**\n * A mock stream implementation that breaks up provided data into\n * random-sized chunks and emits 'data' events. This is used to simulate\n * data arriving with arbitrary packet boundaries.\n */\nexport class SourceStream extends Readable {\n\n  private buf: Buffer;\n\n  constructor(private str: string = '', private min: number = 1, private max: number = str.length) {\n    super();\n\n    this.buf = new Buffer(str, 'binary');\n  }\n\n  public _read() {\n\n    /* ToDo: segment data\n    const len = Math.min(\n      this.min + Math.floor(Math.random() * (this.max - this.min)),\n      this.buf.length\n    );\n\n    const b = this.buf.slice(0, len);\n\n    if (len < this.buf.length) {\n      this.buf = this.buf.slice(len, this.buf.length);\n      this.push(b);\n    } else {\n      this.push(null); // push the EOF-signaling `null` chunk\n    }*/\n\n    this.push(this.buf);\n    this.push(null); // push the EOF-signaling `null` chunk\n  }\n}\n"]}