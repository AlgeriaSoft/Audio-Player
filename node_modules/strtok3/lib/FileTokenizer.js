"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var AbstractTokenizer_1 = require("./AbstractTokenizer");
var fs = require("fs-extra");
var _1 = require("./");
var FileTokenizer = (function (_super) {
    __extends(FileTokenizer, _super);
    function FileTokenizer(fd, fileSize) {
        var _this = _super.call(this) || this;
        _this.fd = fd;
        _this.fileSize = fileSize;
        _this.fileOffset = 0;
        return _this;
    }
    FileTokenizer.prototype.readBuffer = function (buffer, offset, length, position) {
        var _this = this;
        if (position) {
            this.fileOffset = position;
        }
        return fs.read(this.fd, buffer, offset, length, this.fileOffset).then(function (bytesRead) {
            if (bytesRead < length)
                throw _1.EndOfFile;
            _this.fileOffset += bytesRead;
            // debug("Read:" + buffer.slice(offset, length).toString("hex"));
            return bytesRead;
        });
    };
    /**
     * @param length Number of bytes to ignore
     */
    FileTokenizer.prototype.ignore = function (length) {
        this.fileOffset += length;
        return Promise.resolve(null);
    };
    FileTokenizer.prototype.close = function () {
        return fs.close(this.fd);
    };
    return FileTokenizer;
}(AbstractTokenizer_1.AbstractTokenizer));
exports.FileTokenizer = FileTokenizer;
