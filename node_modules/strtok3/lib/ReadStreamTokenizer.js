"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var AbstractTokenizer_1 = require("./AbstractTokenizer");
var _1 = require("./");
var then_read_stream_1 = require("then-read-stream");
var ReadStreamTokenizer = (function (_super) {
    __extends(ReadStreamTokenizer, _super);
    function ReadStreamTokenizer(stream, fileSize) {
        var _this = _super.call(this) || this;
        _this.streamReader = new then_read_stream_1.StreamReader(stream);
        _this.fileSize = fileSize;
        return _this;
    }
    ReadStreamTokenizer.prototype.readBuffer = function (buffer, offset, length, position) {
        if (position === void 0) { position = null; }
        return this.streamReader.read(buffer, offset, length, position) // ToDo: looks like wrong return type is defined in fs.read
            .catch(function (err) {
            if (err === then_read_stream_1.StreamReader.EndOfStream)
                throw _1.EndOfFile;
            else
                throw err;
        });
    };
    ReadStreamTokenizer.prototype.ignore = function (length) {
        var buf = new Buffer(length);
        return this.streamReader.read(buf, 0, length).then(function () { return null; }); // stream cannot skip data
    };
    return ReadStreamTokenizer;
}(AbstractTokenizer_1.AbstractTokenizer));
exports.ReadStreamTokenizer = ReadStreamTokenizer;
